{"ast":null,"code":"import _assertThisInitialized from \"/Users/mbogesk/Desktop/JSON_MAKER/sew/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/mbogesk/Desktop/JSON_MAKER/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mbogesk/Desktop/JSON_MAKER/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/mbogesk/Desktop/JSON_MAKER/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mbogesk/Desktop/JSON_MAKER/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/mbogesk/Desktop/JSON_MAKER/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/mbogesk/Desktop/JSON_MAKER/sew/src/DataGeneral.js\";\nimport React, { Component, Fragment } from 'react';\nimport jsonData from './marketing_json/svgOverlay.json';\nimport './DataGeneral.scss';\nvar json = JSON.parse(JSON.stringify(jsonData));\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListItem, _Component);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListItem).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        style: {\n          \"fontSize\": \"12px\",\n          \"color\": \"orange\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, this.props.customName, \" \", this.props.name), \"\\xA0\", React.createElement(\"small\", {\n        style: {\n          \"fontSize\": \"12px\",\n          \"color\": \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, this.props.list));\n    }\n  }]);\n\n  return ListItem;\n}(Component);\n\nvar PlainJson =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(PlainJson, _Component2);\n\n  function PlainJson(props) {\n    var _this;\n\n    _classCallCheck(this, PlainJson);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlainJson).call(this, props));\n    _this.state = {\n      json: _this.props,\n      changedDetected: _this.props,\n      markup: _this.props,\n      jsonValue: _this.props,\n      jsonStringify: JSON.stringify(_this.jsonValue, null, 2),\n      clicked: '',\n      customName: _this.props //Object.entries(this.props)\n      // \n\n    };\n    return _this;\n  }\n\n  _createClass(PlainJson, [{\n    key: \"render\",\n    value: function render() {\n      console.log();\n      return React.createElement(\"div\", {\n        className: \"rightDiv\",\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"textarea-a--json\",\n        className: \"sds_field sds-js_input-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        disabled: \"disabled\",\n        id: \"textarea-a--json\",\n        value: JSON.stringify(this.state.jsonValue.json, null, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return PlainJson;\n}(Component);\n\n;\n\nvar DataGeneral =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(DataGeneral, _Component3);\n\n  function DataGeneral(props) {\n    var _this2;\n\n    _classCallCheck(this, DataGeneral);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DataGeneral).call(this, props));\n    _this2.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility: 'hidden'\n    };\n    _this2.parseJson = _this2.parseJson.bind(_assertThisInitialized(_this2));\n    _this2.toUpdate = _this2.toUpdate.bind(_assertThisInitialized(_this2));\n    _this2.createMarkup = _this2.createMarkup.bind(_assertThisInitialized(_this2));\n    _this2.elemUpdatedInForm = _this2.elemUpdatedInForm.bind(_assertThisInitialized(_this2));\n    _this2.focusElem = _this2.focusElem.bind(_assertThisInitialized(_this2));\n    return _this2;\n  } // Create HTML template from json\n\n\n  _createClass(DataGeneral, [{\n    key: \"parseJson\",\n    value: function parseJson() {\n      var origJson = json;\n      var jsonNew = this.state.jsonValue;\n      console.log(origJson);\n      var ctaLinksArray = origJson.data.links.content;\n      var linkInputs = ctaLinksArray.map(function (item, index) {\n        return \" <label htmlFor=\\\"text-input-ctaText_\".concat(index, \"\\\">\\n    Text:\\n    <input data-instancename=\\\"text\\\" id=\\\"text-input-ctaText_\").concat(index, \"\\\" name=\\\"text\\\" placeholder=\").concat(item.text, \" type=\\\"text\\\" value=\\\"\").concat(item.text, \"\\\"/>\\n    </label>\\n    <label htmlFor=\\\"text-input-ctaLink_\").concat(index, \"\\\" >\\n    Link: \\n    <input data-instancename=\\\"href\\\" id=\\\"text-input-ctaLink_\").concat(index, \"\\\" name=\\\"href\\\" placeholder=\").concat(item.href, \" type=\\\"text\\\" value=\").concat(item.href, \" />\\n    </label>\");\n      });\n      var instanceHtml = '';\n      instanceHtml = \"\\n        <label htmlFor=\\\"text-input_\".concat(origJson.instanceDesc.replace(/\\s/g, ''), \"\\\">Instance Description:\\n        <input data-instancename='instanceDesc' id=\\\"text-input_\").concat(origJson.instanceDesc.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.instanceDesc, \" placeholder=\\\"\").concat(origJson.instanceDesc, \"\\\" />\\n      </label>\\n      <br>\\n      <h5>Background Properties</h5>\\n      <label htmlFor=\\\"text-input_\").concat(origJson.data.background.content.altText.replace(/\\s/g, ''), \"\\\">Background Alt Text:\\n        <input data-instancename='altText' name=\\\"background\\\" id=\\\"text-input_\").concat(origJson.data.background.content.altText.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.data.background.content.altText, \" placeholder=\\\"\").concat(origJson.data.background.content.altText, \"\\\" />\\n      </label>\\n      <br>\\n      <label htmlFor=\\\"text-input_\").concat(origJson.data.background.content.largeImg.replace(/\\s/g, ''), \"\\\">Background Desktop Image:\\n        <input data-instancename='largeImg' name=\\\"background\\\" id=\\\"text-input_\").concat(origJson.data.background.content.largeImg.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.data.background.content.largeImg, \" placeholder=\\\"\").concat(origJson.data.background.content.largeImg, \"\\\" />\\n      </label>\\n      <br>\\n      <label htmlFor=\\\"text-input_\").concat(origJson.data.background.content.smallImg.replace(/\\s/g, ''), \"\\\">Background Mobile Image:\\n        <input data-instancename='smallImg' name=\\\"background\\\" id=\\\"text-input_\").concat(origJson.data.background.content.smallImg.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.data.background.content.smallImg, \" placeholder=\\\"\").concat(origJson.data.background.content.smallImg, \"\\\" />\\n      </label>\\n      <br>\\n      <h5>SVG Overlay Properties</h5>\\n      <label htmlFor=\\\"text-input_\").concat(origJson.data.svgoverlay.altText.replace(/\\s/g, ''), \"\\\">Svg Overlay Alt Text:\\n        <input data-instancename='altText' name=\\\"svgoverlay\\\" id=\\\"text-input_\").concat(origJson.data.svgoverlay.altText.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.data.svgoverlay.altText, \" placeholder=\\\"\").concat(origJson.data.svgoverlay.altText, \"\\\" />\\n      </label>\\n      <br>\\n      <label htmlFor=\\\"text-input_\").concat(origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''), \"\\\">Svg Overlay Desktop Image:\\n        <input data-instancename='largeImg' name=\\\"svgoverlay\\\" id=\\\"text-input_\").concat(origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.data.svgoverlay.largeImg, \" placeholder=\\\"\").concat(origJson.data.svgoverlay.largeImg, \"\\\" />\\n      </label>\\n      <br>\\n      <label htmlFor=\\\"text-input_\").concat(origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''), \"\\\">Svg Overlay Mobile Image:\\n        <input data-instancename='smallImg' name=\\\"svgoverlay\\\" id=\\\"text-input_\").concat(origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''), \"\\\" type=\\\"text\\\" value=\").concat(jsonNew.data.svgoverlay.smallImg, \" placeholder=\\\"\").concat(origJson.data.svgoverlay.smallImg, \"\\\" />\\n      </label>\\n      <br>\\n      <h5>CTA links</h5>\\n      \").concat(linkInputs, \"\\n            <label htmlFor=\\\"text-input_\").concat(origJson.experimentRunning, \"\\\">Experiment Running:\\n        <select data-instancename='experimentRunning' id=\\\"text-input_\").concat(origJson.experimentRunning, \"\\\">\\n          <option defaultValue=\\\"\").concat(jsonNew.experimentRunning, \"\\\">\").concat(jsonNew.experimentRunning, \"</option>\\n          <option value=\\\"\").concat(!jsonNew.experimentRunning, \"\\\">\").concat(!jsonNew.experimentRunning, \"</option>\\n        </select>\\n      </label>\\n      <br>\\n    \");\n      this.setState({\n        visibility: 'visible'\n      });\n      this.toUpdate(instanceHtml);\n    } // Update the new HTML state\n\n  }, {\n    key: \"toUpdate\",\n    value: function toUpdate(instanceHtml) {\n      this.setState({\n        elem: instanceHtml\n      });\n      this.createMarkup();\n    } // Convert string to HTML and set in DOM\n\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup() {\n      return {\n        __html: this.state.elem\n      };\n    } // Detect change on the form\n\n  }, {\n    key: \"elemUpdatedInForm\",\n    value: function elemUpdatedInForm(e) {\n      //console.dir(e.target.dataset.instancename);\n      this.setState({\n        changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n        markup: e.target.value,\n        customName: e.target.dataset.instancename\n      }); // write changes to json\n\n      this.makeChangesJson();\n    }\n  }, {\n    key: \"makeChangesJson\",\n    value: function makeChangesJson() {\n      var _this3 = this;\n\n      var deepChange = this.state.jsonValue;\n      setTimeout(function () {\n        // changing json new value\n        var currentChange = _this3.state.jsonValue[_this3.state.customName]; //console.log(`1: ${currentChange}`);\n        //console.log(this.state.customName);\n\n        if (_this3.state.customName === 'experimentRunning') {\n          currentChange = currentChange ? _this3.state.jsonValue[_this3.state.customName] = false : _this3.state.jsonValue[_this3.state.customName] = true; // console.log(`2: ${currentChange}`);\n        }\n\n        if (_this3.state.customName === 'instanceDesc') {\n          _this3.state.jsonValue[_this3.state.customName] = _this3.state.markup; //console.log(`3: ${currentChange}`);\n        } // Background Image, Alt\n\n\n        if (_this3.state.targetName === 'background') {\n          if (deepChange.data.background.content[_this3.state.customName]) {\n            deepChange.data.background.content[_this3.state.customName] = _this3.state.markup;\n          }\n        } // svgoverlay Image, SVG, Alt\n\n\n        if (_this3.state.targetName === 'svgoverlay') {\n          if (deepChange.data.svgoverlay[_this3.state.customName]) {\n            deepChange.data.svgoverlay[_this3.state.customName] = _this3.state.markup;\n          }\n        } // links - CTA\n\n\n        if (_this3.state.targetName === 'href') {\n          deepChange.data.links.content.map(function (element, index) {\n            //console.log(element.text);\n            console.log(deepChange.data.links.content[index][_this3.state.targetName] = _this3.state.markup);\n            return deepChange.data.links.content[index][_this3.state.targetName] = _this3.state.markup;\n          });\n        }\n\n        if (_this3.state.targetName === 'text') {\n          deepChange.data.links.content.map(function (element, index) {\n            //console.log(element.text);\n            console.log(deepChange.data.links.content[index][_this3.state.targetName] = _this3.state.markup);\n            return deepChange.data.links.content[index][_this3.state.targetName] = _this3.state.markup;\n          });\n        } //jsonNew.data.background.content.altText\n        // console.log(`${JSON.stringify(this.state.jsonValue)[this.state.customName]} ${this.state.customName}`);\n        // console.log('Changed instance '+this.state.changedDetected +' to ' + this.state.markup + ' ' +currentChange);\n\n\n        var theUpdatedJson = _this3.state.jsonValue; //console.log(theUpdatedJson);\n\n        _this3.setState({\n          jsonValue: theUpdatedJson\n        }); // console.log(this.state.jsonValue);\n\n\n        _this3.parseJson();\n      }, 2000);\n    }\n  }, {\n    key: \"focusElem\",\n    value: function focusElem(e) {\n      // this fn helps identify which input elem we are changing\n      this.setState({\n        targetName: e.target.name\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //changeName += `${this.state.changedDetected} ${this.state.markup}`;\n      console.log(this.state.jsonValue);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DataGeneral\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"select-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onChange: this.parseJson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, \"Select Template\"), React.createElement(\"option\", {\n        defaultValue: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"JSON Modules\"), React.createElement(\"option\", {\n        value: this.state.jsonValue.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, this.state.jsonValue.name))), React.createElement(\"div\", {\n        className: \"SelectForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"leftDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onInput: this.elemUpdatedInForm,\n        onKeyDown: this.focusElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        dangerouslySetInnerHTML: this.createMarkup(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      })))), React.createElement(PlainJson, {\n        json: this.state.jsonDataRaw,\n        detect: this.state.changedDetected,\n        markup: this.state.markup,\n        jsonValue: this.state.jsonValue,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }))), React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, \"Last Change\"), React.createElement(ListItem, {\n        name: this.state.changedDetected,\n        list: this.state.markup,\n        customName: this.state.customName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DataGeneral;\n}(Component);\n\nexport default DataGeneral;","map":{"version":3,"sources":["/Users/mbogesk/Desktop/JSON_MAKER/sew/src/DataGeneral.js"],"names":["React","Component","Fragment","jsonData","json","JSON","parse","stringify","ListItem","props","customName","name","list","PlainJson","state","changedDetected","markup","jsonValue","jsonStringify","clicked","console","log","visibility","DataGeneral","elem","jsonDataRaw","targetName","parseJson","bind","toUpdate","createMarkup","elemUpdatedInForm","focusElem","origJson","jsonNew","ctaLinksArray","data","links","content","linkInputs","map","item","index","text","href","instanceHtml","instanceDesc","replace","background","altText","largeImg","smallImg","svgoverlay","experimentRunning","setState","__html","e","target","nodeName","toLowerCase","value","dataset","instancename","makeChangesJson","deepChange","setTimeout","currentChange","element","theUpdatedJson"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n  Fragment\n} from 'react';\nimport jsonData from './marketing_json/svgOverlay.json';\nimport './DataGeneral.scss';\nlet json = JSON.parse(JSON.stringify(jsonData));\n\nclass ListItem extends Component {\n  render() {\n    return ( \n      <Fragment>\n\t      <small style={{ \"fontSize\": \"12px\", \"color\": \"orange\" }}>{this.props.customName} {this.props.name}</small>&nbsp;\n\t\t\t  <small style={{ \"fontSize\": \"12px\", \"color\": \"red\" }}>{this.props.list}</small>\n\t\t\t</Fragment>\n    );\n  }\n}\nclass PlainJson extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: this.props,\n      changedDetected: this.props,\n      markup: this.props,\n      jsonValue: this.props,\n      jsonStringify: JSON.stringify(this.jsonValue, null, 2),\n      clicked: '',\n      customName:this.props\n      //Object.entries(this.props)\n      // \n    };\n  }\n\n  render() {\n    console.log();\n    return (\n      <div className=\"rightDiv\" style={{\"visibility\":`${this.props.visibility}`}}>\n        <Fragment>\n          <label htmlFor=\"textarea-a--json\" className=\"sds_field sds-js_input-control\">\n            <textarea disabled=\"disabled\" id=\"textarea-a--json\" value={ JSON.stringify(this.state.jsonValue.json, null, 2) }>\n            </textarea>\n          </label>\n        </Fragment>\n      </div>\n    );\n  }\n};\n\nclass DataGeneral extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility:'hidden'\n    }\n    this.parseJson = this.parseJson.bind(this);\n    this.toUpdate = this.toUpdate.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n    this.elemUpdatedInForm = this.elemUpdatedInForm.bind(this);\n    this.focusElem = this.focusElem.bind(this);\n\n  }\n\n  // Create HTML template from json\n  parseJson() {\n\n    const origJson = json;\n    let jsonNew = this.state.jsonValue;\n    console.log(origJson);\n\n    let ctaLinksArray = origJson.data.links.content;\n    let linkInputs = ctaLinksArray.map((item, index) => {\n      return (` <label htmlFor=\"text-input-ctaText_${index}\">\n    Text:\n    <input data-instancename=\"text\" id=\"text-input-ctaText_${index}\" name=\"text\" placeholder=${item.text} type=\"text\" value=\"${item.text}\"/>\n    </label>\n    <label htmlFor=\"text-input-ctaLink_${index}\" >\n    Link: \n    <input data-instancename=\"href\" id=\"text-input-ctaLink_${index}\" name=\"href\" placeholder=${item.href} type=\"text\" value=${item.href} />\n    </label>`);\n    });\n\n    let instanceHtml = '';\n\n    instanceHtml = `\n        <label htmlFor=\"text-input_${origJson.instanceDesc.replace(/\\s/g, '')}\">Instance Description:\n        <input data-instancename='instanceDesc' id=\"text-input_${origJson.instanceDesc.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.instanceDesc} placeholder=\"${origJson.instanceDesc}\" />\n      </label>\n      <br>\n      <h5>Background Properties</h5>\n      <label htmlFor=\"text-input_${origJson.data.background.content.altText.replace(/\\s/g, '')}\">Background Alt Text:\n        <input data-instancename='altText' name=\"background\" id=\"text-input_${origJson.data.background.content.altText.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.data.background.content.altText} placeholder=\"${origJson.data.background.content.altText}\" />\n      </label>\n      <br>\n      <label htmlFor=\"text-input_${origJson.data.background.content.largeImg.replace(/\\s/g, '')}\">Background Desktop Image:\n        <input data-instancename='largeImg' name=\"background\" id=\"text-input_${origJson.data.background.content.largeImg.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.data.background.content.largeImg} placeholder=\"${origJson.data.background.content.largeImg}\" />\n      </label>\n      <br>\n      <label htmlFor=\"text-input_${origJson.data.background.content.smallImg.replace(/\\s/g, '')}\">Background Mobile Image:\n        <input data-instancename='smallImg' name=\"background\" id=\"text-input_${origJson.data.background.content.smallImg.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.data.background.content.smallImg} placeholder=\"${origJson.data.background.content.smallImg}\" />\n      </label>\n      <br>\n      <h5>SVG Overlay Properties</h5>\n      <label htmlFor=\"text-input_${origJson.data.svgoverlay.altText.replace(/\\s/g, '')}\">Svg Overlay Alt Text:\n        <input data-instancename='altText' name=\"svgoverlay\" id=\"text-input_${origJson.data.svgoverlay.altText.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.data.svgoverlay.altText} placeholder=\"${origJson.data.svgoverlay.altText}\" />\n      </label>\n      <br>\n      <label htmlFor=\"text-input_${origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')}\">Svg Overlay Desktop Image:\n        <input data-instancename='largeImg' name=\"svgoverlay\" id=\"text-input_${origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.data.svgoverlay.largeImg} placeholder=\"${origJson.data.svgoverlay.largeImg}\" />\n      </label>\n      <br>\n      <label htmlFor=\"text-input_${origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')}\">Svg Overlay Mobile Image:\n        <input data-instancename='smallImg' name=\"svgoverlay\" id=\"text-input_${origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')}\" type=\"text\" value=${jsonNew.data.svgoverlay.smallImg} placeholder=\"${origJson.data.svgoverlay.smallImg}\" />\n      </label>\n      <br>\n      <h5>CTA links</h5>\n      ${linkInputs}\n            <label htmlFor=\"text-input_${origJson.experimentRunning}\">Experiment Running:\n        <select data-instancename='experimentRunning' id=\"text-input_${origJson.experimentRunning}\">\n          <option defaultValue=\"${jsonNew.experimentRunning}\">${jsonNew.experimentRunning}</option>\n          <option value=\"${!jsonNew.experimentRunning}\">${!jsonNew.experimentRunning}</option>\n        </select>\n      </label>\n      <br>\n    `;\n    this.setState({\n      visibility: 'visible'\n    })\n    this.toUpdate(instanceHtml);\n  }\n  // Update the new HTML state\n  toUpdate(instanceHtml) {\n    this.setState({\n      elem: instanceHtml\n    });\n    this.createMarkup();\n  }\n\n  // Convert string to HTML and set in DOM\n  createMarkup() {\n    return {\n      __html: this.state.elem\n    };\n  }\n\n  // Detect change on the form\n  elemUpdatedInForm(e) {\n    //console.dir(e.target.dataset.instancename);\n    this.setState({\n      changedDetected: `${e.target.nodeName.toLowerCase()}`,\n      markup: e.target.value,\n      customName: e.target.dataset.instancename\n    });\n\n    // write changes to json\n    this.makeChangesJson();\n  }\n  makeChangesJson() {\n    let deepChange = this.state.jsonValue;\n\n    setTimeout(() => {\n      // changing json new value\n      let currentChange = this.state.jsonValue[this.state.customName];\n      //console.log(`1: ${currentChange}`);\n      //console.log(this.state.customName);\n      if (this.state.customName === 'experimentRunning') {\n        currentChange = currentChange ? (this.state.jsonValue[this.state.customName] = false) : (this.state.jsonValue[this.state.customName] = true);\n        // console.log(`2: ${currentChange}`);\n      }\n      if (this.state.customName === 'instanceDesc') {\n        this.state.jsonValue[this.state.customName] = this.state.markup;\n        //console.log(`3: ${currentChange}`);\n      }\n      // Background Image, Alt\n      if (this.state.targetName === 'background') {\n        if (deepChange.data.background.content[this.state.customName]) {\n          deepChange.data.background.content[this.state.customName] = this.state.markup;\n        }\n      }\n      // svgoverlay Image, SVG, Alt\n      if (this.state.targetName === 'svgoverlay') {\n        if (deepChange.data.svgoverlay[this.state.customName]) {\n          deepChange.data.svgoverlay[this.state.customName] = this.state.markup;\n        }\n\n      }\n      // links - CTA\n      if (this.state.targetName === 'href') {\n        deepChange.data.links.content.map((element, index) => {\n          //console.log(element.text);\n          console.log(deepChange.data.links.content[index][this.state.targetName] = this.state.markup);\n         return deepChange.data.links.content[index][this.state.targetName] = this.state.markup;\n        });\n      }\n      if (this.state.targetName === 'text') {\n        deepChange.data.links.content.map((element, index) => {\n          //console.log(element.text);\n          console.log(deepChange.data.links.content[index][this.state.targetName] = this.state.markup);\n         return deepChange.data.links.content[index][this.state.targetName] = this.state.markup;\n        });\n\n      }\n\n      //jsonNew.data.background.content.altText\n\n      // console.log(`${JSON.stringify(this.state.jsonValue)[this.state.customName]} ${this.state.customName}`);\n      // console.log('Changed instance '+this.state.changedDetected +' to ' + this.state.markup + ' ' +currentChange);\n\n      let theUpdatedJson = this.state.jsonValue;\n\n      //console.log(theUpdatedJson);\n      this.setState({\n        jsonValue: theUpdatedJson\n      });\n      // console.log(this.state.jsonValue);\n\n      this.parseJson();\n    }, 2000);\n  }\n\n\n  focusElem(e) {\n    // this fn helps identify which input elem we are changing\n    this.setState({\n      targetName: e.target.name\n    })\n  }\n  render() {\n    //changeName += `${this.state.changedDetected} ${this.state.markup}`;\n    console.log(this.state.jsonValue);\n    return(\n      <Fragment>\n        <div className=\"DataGeneral\">\n         <div>\n         <span className=\"select-dropdown\">\n          \n            <select onChange={this.parseJson} ><option>Select Template</option>\n              <option defaultValue>JSON Modules</option>\n              <option value={this.state.jsonValue.name}>{this.state.jsonValue.name}</option>\n            </select>\n        </span>\n         <div className=\"SelectForm\">\n          <Fragment>\n            <div className=\"leftDiv\">\n              <form  onInput={this.elemUpdatedInForm} onKeyDown={this.focusElem}>\n                 <div dangerouslySetInnerHTML={this.createMarkup()}/>\n              </form>\n            </div>\n          </Fragment>\n          <PlainJson json={this.state.jsonDataRaw} detect={this.state.changedDetected} markup={this.state.markup} jsonValue={this.state.jsonValue} visibility={this.state.visibility}/>\n          </div>\n        </div>\n       \n        \n          <h6>Last Change</h6> \n          <ListItem name={this.state.changedDetected} list={this.state.markup} customName={this.state.customName} />\n        </div>\n      </Fragment>\n    );\n\n  }\n}\n\nexport default DataGeneral;"]},"metadata":{},"sourceType":"module"}