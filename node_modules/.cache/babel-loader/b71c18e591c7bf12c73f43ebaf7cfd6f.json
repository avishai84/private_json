{"ast":null,"code":"import _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/imgpreview/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport DraggableComp from '../draggable_cta';\nimport MobileToggle from './MobileToggle';\n\nvar ImgPreview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImgPreview, _Component);\n\n  function ImgPreview(props) {\n    var _this;\n\n    _classCallCheck(this, ImgPreview);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImgPreview).call(this, props));\n\n    _this.positionsFromDraggable = function (x, y) {\n      _this.setState({\n        positionX: x,\n        positionY: y,\n        imgNaturallSize: _this.props.imgData.data.background.content.largeImg,\n        brandUpdate: _this.props.brandName\n      }); // natural width/height values of image to help calc. CTA '%' position\n\n\n      _this.props.parentPositioningCallback(_this.state.positionX, _this.state.positionY);\n    };\n\n    _this.state = {\n      imgData: _this.props.imgData,\n      linksText: _this.prop,\n      elemChange: _this.props.elemChange,\n      jsonValue: _this.props.jsonValue,\n      isChecked: _this.props,\n      brandUpdate: '',\n      imgUrl: '',\n      positionX: '',\n      positionY: '',\n      imgNaturalWidth: 0,\n      imgNaturalHeight: 0,\n      aria: false,\n      toggleCTA: ''\n    };\n    return _this;\n  }\n\n  _createClass(ImgPreview, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        imgUrl: nextProps.brandName\n      });\n    } // Welcome to Prop drilling....\n    // We need to get the position X, Y data to update the JSON.\n    // The data is coming from Draggable comp. three levels deep\n    // Future update to use Contex API\n\n  }, {\n    key: \"imageLoaded\",\n    value: function imageLoaded() {\n      // Set natural width / Height once image is loaded for desktop\n      this.setState({\n        imgNaturalWidth: this._image.naturalWidth,\n        imgNaturalHeight: this._image.naturalHeight\n      });\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      this.setState({\n        color: this.props.color\n      });\n    }\n  }, {\n    key: \"dropdownButtonClicked\",\n    value: function dropdownButtonClicked() {\n      this.setState({\n        aria: !this.state.aria,\n        toggleCTA: this.state.toggleCTA === '' ? this.state.toggleCTA = 'open' : this.state.toggleCTA = ''\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var smallSvg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.svgoverlay.smallImg);\n      var largeSvg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.svgoverlay.largeImg);\n      var smallImg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.background.content.smallImg);\n      var largeImg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.background.content.largeImg); // set context for ref. DOM elem.\n      // For more info, see video: https://www.youtube.com/watch?v=VyMziBh4SYM\n\n      var self = this;\n      var headerSubmenu = '';\n      var linksText = '';\n      var dropdownClass = 'no_dropdown';\n\n      if (!this.props.dropdownSelected) {\n        linksText = this.state.imgData.data.links.content;\n      } else {\n        linksText = this.state.imgData.data.links.content[0].submenu;\n        headerSubmenu = this.state.imgData.data.links.content[0].heading.text;\n        dropdownClass = 'dropdown_cta_on';\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility),\n          \"display\": \"\".concat(this.props.display)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(MobileToggle, {\n        imgData: this.state.imgData.data,\n        imgUrl: this.state.imgUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"imgPreview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"colorPicker\",\n        style: {\n          \"position\": \"absolute\",\n          \"top\": 0,\n          \"left\": \"326%\",\n          \"zIndex\": 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(ColorPicker, {\n        colors: this.getColor.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"mkt-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width:767px)\",\n        srcSet: smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        alt: this.state.imgData.data.background.content.altText,\n        src: largeImg //  Getting a reference to the image as DOM elem to calc. width/height for boundaries of draggable CTA\n        ,\n        ref: function ref(el) {\n          self._image = el;\n        },\n        onLoad: this.imageLoaded.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"absolute leftTop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(DraggableComp, {\n        desktopStyles: this.state.imgData.data.links.style.desktop,\n        parentPositioningFromDraggbleCallback: this.positionsFromDraggable.bind(this),\n        imgNaturalWidth: this.state.imgNaturalWidth,\n        imgNaturalHeight: this.state.imgNaturalHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: dropdownClass,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, headerSubmenu.length > 0 ? React.createElement(\"button\", {\n        \"aria-expanded\": this.state.aria,\n        onClick: this.dropdownButtonClicked.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, headerSubmenu)) : '', React.createElement(\"ul\", {\n        className: this.state.toggleCTA,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, linksText.map(function (item, index) {\n        return React.createElement(\"li\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, item.text);\n      })))), React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width: 767px)\",\n        srcSet: smallSvg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: largeSvg,\n        alt: this.state.imgData.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ImgPreview;\n}(Component);\n\nexport default ImgPreview;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/imgpreview/index.js"],"names":["React","Component","Fragment","DraggableComp","MobileToggle","ImgPreview","props","positionsFromDraggable","x","y","setState","positionX","positionY","imgNaturallSize","imgData","data","background","content","largeImg","brandUpdate","brandName","parentPositioningCallback","state","linksText","prop","elemChange","jsonValue","isChecked","imgUrl","imgNaturalWidth","imgNaturalHeight","aria","toggleCTA","nextProps","_image","naturalWidth","naturalHeight","color","smallSvg","svgoverlay","smallImg","largeSvg","self","headerSubmenu","dropdownClass","dropdownSelected","links","submenu","heading","text","visibility","display","getColor","bind","altText","el","imageLoaded","style","desktop","length","dropdownButtonClicked","map","item","index"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react';\nimport DraggableComp from '../draggable_cta';\nimport MobileToggle from './MobileToggle';\nclass ImgPreview extends Component {\n\n    constructor(props){\n      super(props);\n      this.state={\n        imgData: this.props.imgData,\n        linksText: this.prop,\n        elemChange:this.props.elemChange,\n        jsonValue : this.props.jsonValue,\n        isChecked : this.props,\n        brandUpdate: '',\n        imgUrl: '',\n        positionX: '',\n        positionY: '',\n        imgNaturalWidth:0,\n        imgNaturalHeight:0,\n        aria: false,\n        toggleCTA: ''\n        \n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.setState({imgUrl:nextProps.brandName});\n  }\n\n  // Welcome to Prop drilling....\n  // We need to get the position X, Y data to update the JSON.\n  // The data is coming from Draggable comp. three levels deep\n  // Future update to use Contex API\n\n  positionsFromDraggable = (x,y) => {\n        this.setState({\n          positionX:x,\n          positionY:y,\n          imgNaturallSize: this.props.imgData.data.background.content.largeImg,\n          brandUpdate: this.props.brandName\n        })\n      // natural width/height values of image to help calc. CTA '%' position\n    this.props.parentPositioningCallback(this.state.positionX,this.state.positionY);\n\n    }\n    imageLoaded(){\n      // Set natural width / Height once image is loaded for desktop\n      this.setState({\n        imgNaturalWidth:this._image.naturalWidth,\n        imgNaturalHeight: this._image.naturalHeight\n      })\n    }\n    getColor(){\n      this.setState({\n        color:this.props.color\n      });\n    }\n    dropdownButtonClicked(){\n      this.setState({\n        aria: !this.state.aria,\n        toggleCTA: (this.state.toggleCTA === '') ?  this.state.toggleCTA = 'open' : this.state.toggleCTA = ''\n      })\n    }\n    render() {\n\n      const smallSvg = `${this.state.imgUrl}${this.state.imgData.data.svgoverlay.smallImg}`;\n      const largeSvg = `${this.state.imgUrl}${this.state.imgData.data.svgoverlay.largeImg}`;\n      const smallImg = `${this.state.imgUrl}${this.state.imgData.data.background.content.smallImg}`;\n      const largeImg = `${this.state.imgUrl}${this.state.imgData.data.background.content.largeImg}`;\n  \n      // set context for ref. DOM elem.\n      // For more info, see video: https://www.youtube.com/watch?v=VyMziBh4SYM\n\n      let self = this;\n      let headerSubmenu = ''\n      let linksText = '';\n      let dropdownClass = 'no_dropdown';\n      if(!this.props.dropdownSelected){\n        linksText = this.state.imgData.data.links.content;\n      }else{\n        linksText = this.state.imgData.data.links.content[0].submenu;\n        headerSubmenu = this.state.imgData.data.links.content[0].heading.text;\n        dropdownClass = 'dropdown_cta_on';\n      }\n\n      return (\n        <Fragment>\n          <div style={{\"visibility\":`${this.props.visibility}`,\"display\":`${this.props.display}`}}>\n            <MobileToggle imgData={this.state.imgData.data} imgUrl={this.state.imgUrl}/>\n            <div className=\"imgPreview\">\n            <Fragment>\n              <div className=\"colorPicker\" style={{\"position\":\"absolute\", \"top\":0,\"left\":\"326%\",\"zIndex\":12}}>\n                <ColorPicker colors={this.getColor.bind(this)}/>\n              </div>\n            </Fragment>\n              <div className=\"mkt-image\">\n                <picture>\n                  <source media=\"(max-width:767px)\" srcSet={smallImg} />\n                    <img alt={this.state.imgData.data.background.content.altText} src={largeImg}\n                      //  Getting a reference to the image as DOM elem to calc. width/height for boundaries of draggable CTA\n                       ref={\n                          function(el){\n                            self._image = el;\n                          }\n                        }\n                      onLoad={this.imageLoaded.bind(this)}\n                    />\n                  </picture>\n                </div>\n                <div className=\"absolute leftTop\">\n                <DraggableComp\n                 desktopStyles={this.state.imgData.data.links.style.desktop}\n                 parentPositioningFromDraggbleCallback={this.positionsFromDraggable.bind(this)}\n                 imgNaturalWidth={this.state.imgNaturalWidth}\n                 imgNaturalHeight={this.state.imgNaturalHeight}>\n                   <div className={dropdownClass}>\n                     { (headerSubmenu.length > 0) ? <button aria-expanded={this.state.aria} onClick={this.dropdownButtonClicked.bind(this)}><span>{headerSubmenu}</span></button> : ''}\n                      <ul className={this.state.toggleCTA}>\n                        {/* \n                          1. get the name of text link from here: this.state.imgData.data.links.content\n                          2. create array and output\n                          3. if dropdown true - convert\n                          \n                        */}\n                          {linksText.map((item, index) => {\n                            return(<li key={index}>{item.text}</li>);\n                          })}\n                      </ul>\n                   </div>\n                  </DraggableComp>\n                  <picture>\n                    <source media=\"(max-width: 767px)\" srcSet={smallSvg}/>\n                    <img src={largeSvg} alt={this.state.imgData.data.svgoverlay.altText}/>\n                  </picture>\n                </div>\n              </div>\n            </div>\n          </Fragment>\n\n        );\n      }\n  }\n\n  export default ImgPreview;\n"]},"metadata":{},"sourceType":"module"}