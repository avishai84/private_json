{"ast":null,"code":"import _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/draggable_cta/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport Draggable from 'react-draggable';\nimport ColorPicker from '../colorPicker/';\n\nvar DraggableComp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DraggableComp, _Component);\n\n  function DraggableComp(props) {\n    var _this;\n\n    _classCallCheck(this, DraggableComp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DraggableComp).call(this, props));\n\n    _this.sendDataUpTheChain = function () {\n      _this.props.parentPositioningFromDraggbleCallback(_this.state.positionX, _this.state.positionY);\n    };\n\n    _this.state = {\n      x: _this.props.x,\n      link: _this.prop,\n      desktopStyles: _this.props.desktopStyles,\n      positionY: '',\n      positionX: '',\n      imgNaturalWidth: _this.props.imgNaturalWidth,\n      imgNaturalHeight: _this.props.imgNaturalHeight\n    };\n    _this.convertToPrecantage = _this.convertToPrecantage.bind(_assertThisInitialized(_this));\n    return _this;\n  } //calculate px to % of the CTA on drag\n  //  https://www.carnaghan.com/knowledge-base/how-to-convert-px-to-percentage/\n\n\n  _createClass(DraggableComp, [{\n    key: \"convertToPrecantage\",\n    value: function convertToPrecantage(e, data) {\n      this.setState({\n        positionX: (Number.parseFloat(data.x / this.state.imgNaturalWidth) * 100).toFixed(2) + '%',\n        positionY: (Number.parseFloat(data.y / this.state.imgNaturalHeight) * 100).toFixed(2) + '%'\n      }); //console.log('CALCULATE Y: ',(Number.parseFloat(data.y / this.state.imgNaturallHeight) * 100).toFixed(2));\n    } // Welcome to Prop drilling....\n    // We need to get the position X, Y data to update the JSON.\n    // The data is coming from Draggable comp. three levels deep\n    // Future update to use Contex API\n\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        imgNaturalWidth: nextProps.imgNaturalWidth,\n        imgNaturalHeight: nextProps.imgNaturalHeight\n      });\n    }\n  }, {\n    key: \"getColor\",\n    value: function getColor() {\n      this.setState({\n        color: this.props.color\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Draggable, {\n        axis: \"both\",\n        handle: \".draggingContainer\",\n        defaultPosition: {\n          x: 200,\n          y: 160\n        },\n        position: null,\n        grid: [1, 1],\n        scale: 1,\n        onStart: this.handleStart // onDrag={this.handleDrag}\n        // onStop={this.handleStop}\n        ,\n        onDrag: this.convertToPrecantage,\n        link: this.state.link,\n        bounds: {\n          left: 0,\n          top: 0,\n          right: 1920,\n          bottom: 1920\n        },\n        onStop: this.sendDataUpTheChain.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"draggable draggingContainer\",\n        style: {\n          \"color\": this.state.desktopStyles.color,\n          \"backgroundColor\": this.state.desktopStyles.backgroundColor,\n          \"fontSize\": 16\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, this.props.children, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"toolTip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.state.positionY), React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.state.positionX), React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"colorPicker\",\n        style: {\n          \"position\": \"absolute\",\n          \"top\": 0,\n          \"left\": \"326%\",\n          \"zIndex\": 12\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(ColorPicker, {\n        colors: this.getColor.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return DraggableComp;\n}(Component);\n\nexport default DraggableComp;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/draggable_cta/index.js"],"names":["React","Component","Fragment","Draggable","ColorPicker","DraggableComp","props","sendDataUpTheChain","parentPositioningFromDraggbleCallback","state","positionX","positionY","x","link","prop","desktopStyles","imgNaturalWidth","imgNaturalHeight","convertToPrecantage","bind","e","data","setState","Number","parseFloat","toFixed","y","nextProps","color","handleStart","left","top","right","bottom","backgroundColor","children","getColor"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react';\nimport Draggable from 'react-draggable';\nimport ColorPicker from '../colorPicker/';\n\nclass DraggableComp extends Component {\n    constructor(props){\n      super(props);\n      this.state={\n        x: this.props.x,\n        link:this.prop,\n        desktopStyles: this.props.desktopStyles,\n        positionY:'',\n        positionX:'',\n        imgNaturalWidth:this.props.imgNaturalWidth,\n        imgNaturalHeight:this.props.imgNaturalHeight\n        \n      };\n      this.convertToPrecantage=this.convertToPrecantage.bind(this);\n    }\n  //calculate px to % of the CTA on drag\n  //  https://www.carnaghan.com/knowledge-base/how-to-convert-px-to-percentage/\n\n    convertToPrecantage(e, data: Object){\n      \n      this.setState({\n        positionX:(Number.parseFloat(data.x / this.state.imgNaturalWidth) * 100).toFixed(2)+'%',\n        positionY: (Number.parseFloat(data.y / this.state.imgNaturalHeight) * 100).toFixed(2)+'%'\n      });\n      //console.log('CALCULATE Y: ',(Number.parseFloat(data.y / this.state.imgNaturallHeight) * 100).toFixed(2));\n    }\n  \n      // Welcome to Prop drilling....\n    // We need to get the position X, Y data to update the JSON.\n    // The data is coming from Draggable comp. three levels deep\n    // Future update to use Contex API\n\n    sendDataUpTheChain = () => {\n      this.props.parentPositioningFromDraggbleCallback(this.state.positionX,this.state.positionY);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.setState({\n        imgNaturalWidth:nextProps.imgNaturalWidth,\n        imgNaturalHeight:nextProps.imgNaturalHeight,\n      });\n  }\n\n  getColor(){\n    this.setState({\n      color:this.props.color\n    });\n  }\n    render() {\n \n      return ( \n        <Draggable\n          axis=\"both\"\n          handle=\".draggingContainer\"\n          defaultPosition={{x: 200, y: 160}}\n          position={null}\n          grid={[1, 1]}\n          scale={1}\n          onStart={this.handleStart}\n          // onDrag={this.handleDrag}\n          // onStop={this.handleStop}\n          onDrag={this.convertToPrecantage}\n          link={this.state.link}\n          bounds={{left:0, top: 0, right: 1920, bottom: 1920}}\n          onStop = {this.sendDataUpTheChain.bind(this)}>\n          <div className=\"draggable draggingContainer\" \n          style={{\"color\":this.state.desktopStyles.color, \"backgroundColor\":this.state.desktopStyles.backgroundColor,\"fontSize\":16}}\n          >\n              {this.props.children}\n              <Fragment>\n                <div className=\"toolTip\">\n                  <span>{this.state.positionY}</span>\n                  <span>{this.state.positionX}</span>\n                  <Fragment>\n                    <div className=\"colorPicker\" style={{\"position\":\"absolute\", \"top\":0,\"left\":\"326%\",\"zIndex\":12}}>\n                      <ColorPicker colors={this.getColor.bind(this)}/>\n                    </div>\n                  </Fragment>\n                </div>\n\n              </Fragment>\n          </div>\n          \n        </Draggable>\n   \n  \n        );\n      }\n  }\n\n  export default DraggableComp;\n"]},"metadata":{},"sourceType":"module"}