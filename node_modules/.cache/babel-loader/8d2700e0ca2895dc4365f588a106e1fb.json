{"ast":null,"code":"import _objectSpread from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _toConsumableArray from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/content/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport brand from '../../marketing_json/brands.json';\nimport jsonData from '../../marketing_json/svgOverlay.json';\nimport ImgPreview from '../imgpreview';\nimport ListItem from '../listitem';\nimport PlainJson from '../plainjson';\nimport OptionCTA from './OptionCTA';\nvar updatedCTAObjFromOptionCTA = {};\nvar json = JSON.parse(JSON.stringify(jsonData));\n\nvar Content =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Content, _Component);\n\n  function Content(props) {\n    var _this;\n\n    _classCallCheck(this, Content);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Content).call(this, props));\n\n    _this.elemUpdatedInForm = function (e) {\n      // This condition test to make sure none of the added CTA is triggered\n      if (e.target.dataset.instancename === 'text' || e.target.dataset.instancename === 'href') {\n        console.dir(e.target);\n\n        _this.setState({\n          changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n          markup: e.target.value,\n          customName: e.target.dataset.instancename\n        }, function () {\n          _this.makeChangesJson();\n        }); // write changes to json\n        // https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n        // Added CTAs condition\n\n      } else if (e.target.dataset.added_cta === 'textAdded' || e.target.dataset.added_cta === 'hrefAdded') {\n        _this.setState({\n          changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n          markup: e.target.value,\n          customName: e.target.dataset.added_cta\n        }, function () {\n          _this.makeChangesJson();\n        });\n      } else {\n        _this.setState({\n          changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n          markup: e.target.value,\n          customName: e.target.dataset.instancename\n        }, function () {\n          _this.makeChangesJson();\n        });\n      }\n    };\n\n    _this.callbackPositionFunction = function (x, y) {\n      _this.setState({\n        positionX: x,\n        positionY: y\n      }); // update json with new positions\n\n\n      _this.state.jsonValue.data.linksContainerStyle.desktop.left = _this.state.positionX;\n      _this.state.jsonValue.data.linksContainerStyle.desktop.top = _this.state.positionY;\n\n      _this.setState({\n        jsonValue: _this.state.jsonValue\n      });\n\n      _this.parseJson();\n    };\n\n    _this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility: 'hidden',\n      display: 'none',\n      brand: brand,\n      brandName: brand,\n      // 'https://www.gol.wip.gidapps.com',\n      positionX: '',\n      positionY: '',\n      ctaAddedContentArr: '',\n      updatedCTAObjFromOptionCTAState: '',\n      ctaCounter: 1,\n      ctaArrayIndexPosition: '',\n      isDropdown: '',\n      headerDropdownInputValue: ''\n    };\n    _this.parseJson = _this.parseJson.bind(_assertThisInitialized(_this));\n    _this.toUpdate = _this.toUpdate.bind(_assertThisInitialized(_this));\n    _this.createMarkup = _this.createMarkup.bind(_assertThisInitialized(_this));\n    _this.elemUpdatedInForm = _this.elemUpdatedInForm.bind(_assertThisInitialized(_this));\n    _this.focusElem = _this.focusElem.bind(_assertThisInitialized(_this));\n    _this.handleBrand = _this.handleBrand.bind(_assertThisInitialized(_this));\n    return _this;\n  } // Create HTML template from json\n\n\n  _createClass(Content, [{\n    key: \"parseJson\",\n    value: function parseJson() {\n      var origJson = json; //let jsonNew = this.state.jsonValue;\n\n      var ctaLinksArray = origJson.data.links.content;\n      var linkInputs = ctaLinksArray.map(function (item, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          key: \"key_Text\" + index,\n          htmlFor: \"text-input-ctaText_\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Text:\", React.createElement(\"input\", {\n          \"data-instancename\": \"text\",\n          id: \"text-input-ctaText_\" + index,\n          name: \"text\",\n          placeholder: item.text,\n          type: \"text\",\n          defaultValue: item.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        })), React.createElement(\"label\", {\n          key: \"key__href\" + index,\n          htmlFor: \"text-input-ctaLink_\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, \"Link:\", React.createElement(\"input\", {\n          \"data-instancename\": \"href\",\n          id: \"text-input-ctaLink_\" + index,\n          name: \"href\",\n          placeholder: item.href,\n          type: \"text\",\n          defaultValue: item.href,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        })));\n      }); // This is the object we create all input fieds to change the json text \n\n      var instanceHtml = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: origJson.instanceDesc.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"Instance Description:\", React.createElement(\"input\", {\n        \"data-instancename\": \"instanceDesc\",\n        id: origJson.instanceDesc.replace(/\\s/g, ''),\n        type: \"text\",\n        placeholder: origJson.instanceDesc,\n        defaultValue: origJson.instanceDesc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Background Properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Background Alt Text:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"background\",\n        id: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.altText,\n        placeholder: origJson.data.background.content.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Background Desktop Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"background\",\n        id: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.largeImg,\n        placeholder: origJson.data.background.content.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Background Mobile Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"background\",\n        id: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.smallImg,\n        placeholder: origJson.data.background.content.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"SVG Overlay Properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Svg Overlay Alt Text:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.altText,\n        placeholder: origJson.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, \"Svg Overlay Desktop Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.largeImg,\n        placeholder: origJson.data.svgoverlay.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Svg Overlay Mobile Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.smallImg,\n        placeholder: origJson.data.svgoverlay.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"CTA links\"), linkInputs, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Advanced Option\"), React.createElement(\"label\", {\n        htmlFor: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, \"Experiment Running:\", React.createElement(\"select\", {\n        \"data-instancename\": \"experimentRunning\",\n        id: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        defaultValue: this.state.jsonValue.experimentRunning.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, this.state.jsonValue.experimentRunning.toString()), React.createElement(\"option\", {\n        defaultValue: this.state.jsonValue.experimentRunning !== true ? 'true' : 'false',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, this.state.jsonValue.experimentRunning !== true ? 'true' : 'false'))));\n      this.setState({\n        visibility: 'visible',\n        display: ''\n      });\n      this.toUpdate(instanceHtml);\n    } // Update the new HTML state\n\n  }, {\n    key: \"toUpdate\",\n    value: function toUpdate(instanceHtml) {\n      this.setState({\n        elem: instanceHtml\n      });\n      this.createMarkup();\n    } // Convert string to HTML and set in DOM\n\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup() {\n      return {\n        __html: this.state.elem\n      };\n    } // Detect change on the form\n\n  }, {\n    key: \"makeChangesJson\",\n    value: function makeChangesJson() {\n      if (this.state.customName === 'experimentRunning') {\n        this.state.jsonValue[this.state.customName] ? this.setState({\n          jsonValue: this.state.jsonValue[this.state.customName] = false\n        }) : this.setState({\n          jsonValue: this.state.jsonValue[this.state.customName] = true\n        });\n      }\n\n      if (this.state.customName === 'instanceDesc') {\n        this.setState({\n          jsonValue: this.state.jsonValue[this.state.customName] = this.state.markup\n        });\n      }\n\n      if (this.state.targetName === 'background') {\n        this.setState({\n          jsonValue: this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup\n        });\n      } // svgoverlay Image, SVG, Alt\n\n\n      if (this.state.targetName === 'svgoverlay') {\n        this.setState({\n          jsonValue: this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup\n        });\n      } // links - CTA\n      // check if dropdown is true, then object need different treatment\n      // Read the example to understand the code.\n      // https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n\n\n      if (this.state.customName === 'href') {\n        if (!this.state.isDropdown) {\n          var updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content = [].concat(_toConsumableArray(this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition)), [updatedObj], _toConsumableArray(this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition + 1)))\n          });\n        } else {\n          var _updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = _updatedObj\n          });\n        }\n      } // Read the example to understand.\n      // https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n\n\n      if (this.state.customName === 'text') {\n        if (!this.state.isDropdown) {\n          var _updatedObj2 = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content = [].concat(_toConsumableArray(this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition)), [_updatedObj2], _toConsumableArray(this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition + 1)))\n          });\n        } else {\n          var _updatedObj3 = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = _updatedObj3\n          });\n        }\n      } // Read the example to understand.\n      // https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n\n\n      if (this.state.customName === 'textAdded') {\n        if (!this.state.isDropdown) {\n          // create a new object and update state with its new value\n          // updatedObj = Object.assign({}, this.state.arr[i],{[name]: value});\n          //   console.dir(updatedObj);\n          //   console.dir([...this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition),\n          //   updatedObj,\n          //   ...this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition+1)\n          // ]);\n          var _updatedObj4 = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content = [].concat(_toConsumableArray(this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition)), [_updatedObj4], _toConsumableArray(this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition + 1)))\n          });\n        } else {\n          var _updatedObj5 = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = _updatedObj5\n          });\n        }\n      } // Added CTA / href\n\n\n      if (this.state.customName === 'hrefAdded') {\n        if (!this.state.isDropdown) {\n          var _updatedObj6 = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content = [].concat(_toConsumableArray(this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition)), [_updatedObj6], _toConsumableArray(this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition + 1)))\n          });\n        } else {\n          var _updatedObj7 = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition], _defineProperty({}, [this.state.targetName], this.state.markup));\n\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = _updatedObj7\n          });\n        }\n      }\n\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n      this.parseJson();\n    }\n  }, {\n    key: \"focusElem\",\n    value: function focusElem(e) {\n      // this fn helps identify which input elem we are changing\n      this.setState({\n        targetName: e.target.name\n      }); // we can evaluate which index input box to target based on its id number\n      // we are updating a state to kmow which index is\n\n      if (e.target.nodeName === \"INPUT\" && e.target.id !== 'undefined') {\n        //  determind which element in array was clicked on based on its ID.\n        if (e.target.id.includes('special_addedCTA') || e.target.id.includes('slinks_isuniques_')) {\n          // get position from ID\n          // stript the text to know the digit at the end. This will determind which position in the array is updating.\n          var arrPosition = e.target.id; // for single digit\n\n          if (arrPosition.length <= 18) {\n            arrPosition = arrPosition.slice(arrPosition.length - 1);\n            this.setState({\n              ctaArrayIndexPosition: parseInt(arrPosition)\n            });\n          } else {\n            // if array is 2 digits (10 or more...)\n            arrPosition = arrPosition.slice(arrPosition.length - 2);\n            this.setState({\n              ctaArrayIndexPosition: parseInt(arrPosition)\n            });\n          }\n        } else if (e.target.id.includes('text-input-ctaText_') || e.target.id.includes('text-input-ctaLink_')) {\n          // target only [0] cta / href\n          this.setState({\n            ctaArrayIndexPosition: 0\n          });\n        }\n      } // if(e.target.id.nodeValue.includes('text-input-ctaText') || e.target.id.nodeValue.includes('text-input-ctaLink')){\n      //   alert('true');\n      // }\n\n    }\n  }, {\n    key: \"handleBrand\",\n    value: function handleBrand(e) {\n      this.setState({\n        brandName: e.target.value\n      });\n    } // Welcome to Prop drilling....\n    // We need to get the position X, Y data to update the JSON.\n    // The data is coming from Draggable comp. three levels deep\n    // Future update to use Contex API\n\n  }, {\n    key: \"addCtaArr\",\n    // update the CTA object in JSON - this call is originating from OptionCTA component\n    value: function () {\n      var _addCtaArr = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(ctaContentArr, ctaCount) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.setState({\n                  ctaAddedContentArr: ctaContentArr,\n                  ctaCounter: ctaCount\n                });\n\n              case 2:\n                this.updateCTA_from_OptionCTA();\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addCtaArr(_x, _x2) {\n        return _addCtaArr.apply(this, arguments);\n      }\n\n      return addCtaArr;\n    }()\n  }, {\n    key: \"rmvCtaArr\",\n    value: function () {\n      var _rmvCtaArr = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(ctaContentArr, ctaCount) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.setState({\n                  ctaAddedContentArr: ctaContentArr,\n                  ctaCounter: ctaCount\n                });\n\n              case 2:\n                this.removeCTA_from_OptionCTA();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function rmvCtaArr(_x3, _x4) {\n        return _rmvCtaArr.apply(this, arguments);\n      }\n\n      return rmvCtaArr;\n    }()\n  }, {\n    key: \"removeCTA_from_OptionCTA\",\n    value: function () {\n      var _removeCTA_from_OptionCTA = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this.state.isDropdown) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                this.state.jsonValue.data.links.content.pop();\n                _context3.next = 4;\n                return this.setState({\n                  updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA,\n                  jsonValue: this.state.jsonValue\n                });\n\n              case 4:\n                this.parseJson();\n                _context3.next = 11;\n                break;\n\n              case 7:\n                this.state.jsonValue.data.links.content[0].submenu.pop();\n                _context3.next = 10;\n                return this.setState({\n                  updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA,\n                  jsonValue: this.state.jsonValue\n                });\n\n              case 10:\n                this.parseJson();\n\n              case 11:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function removeCTA_from_OptionCTA() {\n        return _removeCTA_from_OptionCTA.apply(this, arguments);\n      }\n\n      return removeCTA_from_OptionCTA;\n    }()\n  }, {\n    key: \"updateCTA_from_OptionCTA\",\n    value: function updateCTA_from_OptionCTA() {\n      /*\n          1. Creating a new object from added CTAs and appeding it to the jsonValue text.\n          2. We need to update this.state.jsonValue.data.links.content with the new object\n      */\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.state.ctaAddedContentArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var item = _step.value;\n\n          if (item.hasOwnProperty('props')) {\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = item.props.children[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var name = _step2.value;\n\n                if (item.hasOwnProperty('props')) {\n                  var _iteratorNormalCompletion3 = true;\n                  var _didIteratorError3 = false;\n                  var _iteratorError3 = undefined;\n\n                  try {\n                    for (var _iterator3 = name.props.children[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n                      var content = _step3.value;\n\n                      if (content !== 'undefined') {\n                        if (content.hasOwnProperty('props')) {\n                          if (content.props.hasOwnProperty('data-added_cta')) {\n                            // Assigning new properties inside the object\n                            if (content.props['data-added_cta'] === 'textAdded') {\n                              updatedCTAObjFromOptionCTA.text = content.props.defaultValue;\n                            }\n\n                            if (content.props['data-added_cta'] === 'hrefAdded') {\n                              updatedCTAObjFromOptionCTA.href = content.props.defaultValue;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } catch (err) {\n                    _didIteratorError3 = true;\n                    _iteratorError3 = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n                        _iterator3.return();\n                      }\n                    } finally {\n                      if (_didIteratorError3) {\n                        throw _iteratorError3;\n                      }\n                    }\n                  }\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      ;\n\n      if (!this.state.isDropdown) {\n        // Check if both \"text\" and \"href\" properties are updatedCTAObjFromOptionCTA object \n        if (updatedCTAObjFromOptionCTA.hasOwnProperty('text') && updatedCTAObjFromOptionCTA.hasOwnProperty('href')) {\n          // update state with new object\n          this.setState({\n            updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA\n          }); // push new CTA object into array and update state on jsonValue. (This is the string json on the right)\n\n          this.state.jsonValue.data.links.content.push(this.state.updatedCTAObjFromOptionCTAState);\n          this.setState({\n            jsonValue: this.state.jsonValue\n          });\n          this.parseJson();\n        }\n      } else {\n        if (updatedCTAObjFromOptionCTA.hasOwnProperty('text') && updatedCTAObjFromOptionCTA.hasOwnProperty('href')) {\n          this.setState({\n            updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA\n          });\n          this.state.jsonValue.data.links.content[0].submenu.push(this.state.updatedCTAObjFromOptionCTAState);\n          this.setState({\n            jsonValue: this.state.jsonValue\n          });\n          this.parseJson();\n        }\n      }\n    } // current dropdown status checkbox\n\n  }, {\n    key: \"dropdownSelected\",\n    value: function dropdownSelected(e, currentState) {\n      this.setState({\n        isDropdown: !currentState\n      });\n      this.createDropdown(!currentState);\n    }\n  }, {\n    key: \"createDropdown\",\n    value: function createDropdown(status) {\n      if (status) {\n        // constructing new dropdown object\n        var heading = {\n          \"heading\": {\n            \"text\": \"Shop women's top denim\"\n          },\n          \"submenu\": _toConsumableArray(this.state.jsonValue.data.links.content)\n        };\n        var links = Object.assign({\n          \"type\": \"dropdown\",\n          \"content\": [heading],\n          \"style\": _objectSpread({}, this.state.jsonValue.data.links.style)\n        });\n        var updatedObj = Object.assign(links);\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links = updatedObj\n        });\n        this.setState({\n          jsonValue: this.state.jsonValue\n        });\n        this.parseJson();\n      } else {\n        var copyOfContentArrayObj = _toConsumableArray(this.state.jsonValue.data.links.content[0].submenu);\n\n        var _links = Object.assign({\n          \"style\": _objectSpread({}, this.state.jsonValue.data.links.style),\n          \"content\": copyOfContentArrayObj\n        });\n\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links = _links\n        });\n        this.setState({\n          jsonValue: this.state.jsonValue\n        });\n        this.parseJson();\n      }\n    } // header input for dropdown\n\n  }, {\n    key: \"handleHeaderInputDropdownChange\",\n    value: function handleHeaderInputDropdownChange(e) {\n      this.setState({\n        headerDropdownInputValue: this.state.jsonValue.data.links.content[0].heading.text = e.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DataGeneral\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486\n        },\n        __self: this\n      }, this.state.message), React.createElement(\"span\", {\n        className: \"select-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 487\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onChange: this.handleBrand,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 488\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 489\n        },\n        __self: this\n      }, \"Select Brand\"), Object.entries(this.state.brand.brand[0]).map(function (name, index) {\n        return React.createElement(\"option\", {\n          key: 'brand_' + index,\n          value: name[1],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 491\n          },\n          __self: this\n        }, name[0]);\n      }))), React.createElement(\"span\", {\n        className: \"select-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onChange: this.parseJson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 496\n        },\n        __self: this\n      }, \"Select Template\"), React.createElement(\"option\", {\n        value: this.state.jsonValue.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497\n        },\n        __self: this\n      }, this.state.jsonValue.name))), React.createElement(\"div\", {\n        className: \"SelectForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"leftDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onChange: this.elemUpdatedInForm,\n        onKeyUp: this.focusElem,\n        onBlur: this.focusElem,\n        onClick: this.focusElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503\n        },\n        __self: this\n      }, this.state.elem, React.createElement(OptionCTA, {\n        display: this.state.display,\n        visibility: this.state.visibility,\n        jsonOption: this.state.jsonValue.data.links,\n        addCtaArr: this.addCtaArr.bind(this),\n        rmvCtaArr: this.rmvCtaArr.bind(this),\n        dropdownSelected: this.dropdownSelected.bind(this),\n        handleHeaderInputDropdownChange: this.handleHeaderInputDropdownChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510\n        },\n        __self: this\n      })))), React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 520\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rightDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 521\n        },\n        __self: this\n      }, React.createElement(ImgPreview, {\n        imgData: this.state.jsonValue,\n        visibility: this.state.visibility,\n        display: this.state.display,\n        brandName: this.state.brandName,\n        parentPositioningCallback: this.callbackPositionFunction.bind(this),\n        dropdownSelected: this.dropdownSelected.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, \" \", this.state.positionX, \" \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 530\n        },\n        __self: this\n      }, \" \", this.state.positionY, \" \")), React.createElement(PlainJson, {\n        json: this.state.jsonDataRaw,\n        detect: this.state.changedDetected,\n        markup: this.state.markup,\n        jsonValue: this.state.jsonValue,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 542\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 543\n        },\n        __self: this\n      }, \"Last Change\"), React.createElement(ListItem, {\n        name: this.state.changedDetected,\n        list: this.state.markup,\n        customName: this.state.customName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Content;\n}(Component);\n\nexport default Content;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/content/index.js"],"names":["React","Component","Fragment","brand","jsonData","ImgPreview","ListItem","PlainJson","OptionCTA","updatedCTAObjFromOptionCTA","json","JSON","parse","stringify","Content","props","elemUpdatedInForm","e","target","dataset","instancename","console","dir","setState","changedDetected","nodeName","toLowerCase","markup","value","customName","makeChangesJson","added_cta","callbackPositionFunction","x","y","positionX","positionY","state","jsonValue","data","linksContainerStyle","desktop","left","top","parseJson","elem","jsonDataRaw","targetName","visibility","display","brandName","ctaAddedContentArr","updatedCTAObjFromOptionCTAState","ctaCounter","ctaArrayIndexPosition","isDropdown","headerDropdownInputValue","bind","toUpdate","createMarkup","focusElem","handleBrand","origJson","ctaLinksArray","links","content","linkInputs","map","item","index","text","href","instanceHtml","instanceDesc","replace","background","altText","largeImg","smallImg","svgoverlay","experimentRunning","toString","__html","updatedObj","Object","assign","slice","submenu","name","id","includes","arrPosition","length","parseInt","ctaContentArr","ctaCount","updateCTA_from_OptionCTA","removeCTA_from_OptionCTA","pop","hasOwnProperty","children","defaultValue","push","currentState","createDropdown","status","heading","style","copyOfContentArrayObj","message","entries","addCtaArr","rmvCtaArr","dropdownSelected","handleHeaderInputDropdownChange"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport brand from '../../marketing_json/brands.json';\nimport jsonData from '../../marketing_json/svgOverlay.json';\nimport ImgPreview from '../imgpreview'\nimport ListItem from '../listitem';\nimport PlainJson from '../plainjson';\nimport OptionCTA from './OptionCTA';\n\nconst updatedCTAObjFromOptionCTA = {};\n\nlet json = JSON.parse(JSON.stringify(jsonData));\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility:'hidden',\n      display:'none',\n      brand: brand,\n      brandName: brand, // 'https://www.gol.wip.gidapps.com',\n      positionX: '',\n      positionY: '',\n      ctaAddedContentArr : '',\n      updatedCTAObjFromOptionCTAState:'',\n      ctaCounter: 1,\n      ctaArrayIndexPosition:'',\n      isDropdown: '',\n      headerDropdownInputValue: ''\n    }\n\n    this.parseJson = this.parseJson.bind(this);\n    this.toUpdate = this.toUpdate.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n    this.elemUpdatedInForm = this.elemUpdatedInForm.bind(this);\n    this.focusElem = this.focusElem.bind(this);\n    this.handleBrand = this.handleBrand.bind(this);\n  }\n  // Create HTML template from json\n  parseJson() {\n    const origJson = json;\n    //let jsonNew = this.state.jsonValue;\n    let ctaLinksArray = origJson.data.links.content;\n    let linkInputs = ctaLinksArray.map((item, index) => {\n      return (\n      <div key={index}><label key={\"key_Text\"+index} htmlFor={\"text-input-ctaText_\"+index}>Text:<input data-instancename=\"text\" id={\"text-input-ctaText_\"+index} name=\"text\" placeholder={item.text} type=\"text\" defaultValue={item.text}/></label><label key={\"key__href\"+index} htmlFor={\"text-input-ctaLink_\"+index}>Link:<input data-instancename=\"href\" id={\"text-input-ctaLink_\"+index} name=\"href\" placeholder={item.href} type=\"text\" defaultValue={item.href} /></label></div>);\n    });\n\n    // This is the object we create all input fieds to change the json text \n    let instanceHtml =\n      <div>\n        <label htmlFor={origJson.instanceDesc.replace(/\\s/g, '')}>Instance Description:\n          <input data-instancename='instanceDesc' id={origJson.instanceDesc.replace(/\\s/g, '')} type=\"text\" placeholder={origJson.instanceDesc} defaultValue={origJson.instanceDesc}/>\n        </label>\n        <br/>\n        <h5>Background Properties</h5>\n        <label htmlFor={origJson.data.background.content.altText.replace(/\\s/g, '')}>Background Alt Text:\n        <input data-instancename='altText' name=\"background\" id={origJson.data.background.content.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.altText} placeholder={origJson.data.background.content.altText} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.background.content.largeImg.replace(/\\s/g, '')}>Background Desktop Image:\n          <input data-instancename='largeImg' name=\"background\" id={origJson.data.background.content.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.largeImg} placeholder={origJson.data.background.content.largeImg} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.background.content.smallImg.replace(/\\s/g, '')}>Background Mobile Image:\n        <input data-instancename='smallImg' name=\"background\" id={origJson.data.background.content.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.smallImg} placeholder={origJson.data.background.content.smallImg} />\n        </label>\n        <br/>\n        <h5>SVG Overlay Properties</h5>\n        <label htmlFor={origJson.data.svgoverlay.altText.replace(/\\s/g, '')}>Svg Overlay Alt Text:\n           <input data-instancename='altText' name=\"svgoverlay\" id={origJson.data.svgoverlay.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.altText} placeholder={origJson.data.svgoverlay.altText} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')}>Svg Overlay Desktop Image:\n          <input data-instancename='largeImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.largeImg} placeholder={origJson.data.svgoverlay.largeImg} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')}>Svg Overlay Mobile Image:\n          <input data-instancename='smallImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.smallImg} placeholder={origJson.data.svgoverlay.smallImg} />\n        </label>\n        <br/>\n        <h5>CTA links</h5>\n        {linkInputs}\n        <br/>\n        <h5>Advanced Option</h5>\n        <label htmlFor=\"__experimentRunning\">Experiment Running:\n        <select data-instancename='experimentRunning' id=\"__experimentRunning\">\n          <option defaultValue={this.state.jsonValue.experimentRunning.toString()}>\n            {this.state.jsonValue.experimentRunning.toString()}\n          </option>\n          <option defaultValue={(this.state.jsonValue.experimentRunning !== true) ? 'true': 'false'}>\n          {(this.state.jsonValue.experimentRunning !== true) ? 'true': 'false'}\n          </option>\n        </select>\n      </label></div>;\n\n\n    this.setState({\n      visibility: 'visible',\n      display:''\n    })\n    this.toUpdate(instanceHtml);\n  }\n  // Update the new HTML state\n  toUpdate(instanceHtml) {\n    this.setState({\n      elem: instanceHtml\n    });\n    this.createMarkup();\n  }\n\n  // Convert string to HTML and set in DOM\n  createMarkup() {\n    return {\n      __html: this.state.elem\n    };\n  }\n\n  // Detect change on the form\n  elemUpdatedInForm = (e) => {\n    // This condition test to make sure none of the added CTA is triggered\n    \n    if(e.target.dataset.instancename === 'text' || e.target.dataset.instancename === 'href'){\n      console.dir(e.target);\n      this.setState({\n        changedDetected: `${e.target.nodeName.toLowerCase()}`,\n        markup: e.target.value,\n        customName: e.target.dataset.instancename\n        }, () => { this.makeChangesJson() });\n      // write changes to json\n      // https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n      // Added CTAs condition\n      }else if(e.target.dataset.added_cta === 'textAdded' || e.target.dataset.added_cta === 'hrefAdded'){\n        this.setState({\n          changedDetected: `${e.target.nodeName.toLowerCase()}`,\n          markup: e.target.value,\n          customName: e.target.dataset.added_cta\n          }, () => { this.makeChangesJson() });\n      }else{\n        this.setState({\n          changedDetected: `${e.target.nodeName.toLowerCase()}`,\n          markup: e.target.value,\n          customName: e.target.dataset.instancename\n          }, () => { this.makeChangesJson() });\n      }\n    }\n\n\n\n  makeChangesJson() {\n\n      if (this.state.customName === 'experimentRunning') {\n        this.state.jsonValue[this.state.customName] ? (\n          this.setState({\n            jsonValue: this.state.jsonValue[this.state.customName] = false})) : (this.setState({\n              jsonValue: this.state.jsonValue[this.state.customName] = true}));\n      }\n      if (this.state.customName === 'instanceDesc') {\n        this.setState({\n          jsonValue: this.state.jsonValue[this.state.customName] = this.state.markup\n        })\n\n      }\n      if (this.state.targetName === 'background') {\n         this.setState({\n          jsonValue: this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup\n        })\n      }\n      // svgoverlay Image, SVG, Alt\n      if (this.state.targetName === 'svgoverlay') {\n        this.setState({\n          jsonValue: this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup\n        })\n      }\n\n      // links - CTA\n      // check if dropdown is true, then object need different treatment\n      // Read the example to understand the code.\n      // https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n        if (this.state.customName === 'href') {\n          if(!this.state.isDropdown){\n          const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content = [...this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition),\n              updatedObj,\n              ...this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition+1)\n            ]\n          });\n        }else{\n          const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n          this.setState({\n            jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = updatedObj\n          })\n        }\n      }\n    \n\n      // Read the example to understand.\n      // https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n      if (this.state.customName === 'text') {\n        if(!this.state.isDropdown){\n        const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links.content = [...this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition),\n            updatedObj,\n            ...this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition+1)\n          ]\n        });\n      }else{\n        const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = updatedObj\n        })\n      }\n    }\n\n      // Read the example to understand.\n      // https://stackoverflow.com/questions/28121272/whats-the-best-way-to-update-an-object-in-an-array-in-reactjs\n      if(this.state.customName === 'textAdded') {\n        if(!this.state.isDropdown){\n        // create a new object and update state with its new value\n        // updatedObj = Object.assign({}, this.state.arr[i],{[name]: value});\n        //   console.dir(updatedObj);\n        //   console.dir([...this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition),\n        //   updatedObj,\n        //   ...this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition+1)\n        // ]);\n        const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links.content = [...this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition),\n            updatedObj,\n            ...this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition+1)\n          ]\n        });\n      }else{\n        const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = updatedObj\n        })\n      }\n    }\n      // Added CTA / href\n      if (this.state.customName === 'hrefAdded') {\n        if(!this.state.isDropdown){\n        const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links.content = [...this.state.jsonValue.data.links.content.slice(0, this.state.ctaArrayIndexPosition),\n            updatedObj,\n            ...this.state.jsonValue.data.links.content.slice(this.state.ctaArrayIndexPosition+1)\n          ]\n        });\n      }else{\n        const updatedObj = Object.assign({}, this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition],{[[this.state.targetName]]: this.state.markup});\n        this.setState({\n          jsonValue: this.state.jsonValue.data.links.content[0].submenu[this.state.ctaArrayIndexPosition] = updatedObj\n        })\n      }\n    }\n\n\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n      this.parseJson();\n  }\n\n  focusElem(e) {\n    // this fn helps identify which input elem we are changing\n    this.setState({\n      targetName: e.target.name\n    });\n    // we can evaluate which index input box to target based on its id number\n    // we are updating a state to kmow which index is\n    if(e.target.nodeName === \"INPUT\" && e.target.id !== 'undefined'){\n   \n    //  determind which element in array was clicked on based on its ID.\n      if(e.target.id.includes('special_addedCTA') || e.target.id.includes('slinks_isuniques_')){\n        // get position from ID\n        // stript the text to know the digit at the end. This will determind which position in the array is updating.\n        let arrPosition = e.target.id;\n        // for single digit\n        if(arrPosition.length <= 18){\n          arrPosition = arrPosition.slice(arrPosition.length - 1);\n          this.setState({\n            ctaArrayIndexPosition: parseInt(arrPosition)\n          })\n        }else{\n          // if array is 2 digits (10 or more...)\n          arrPosition = arrPosition.slice(arrPosition.length - 2);\n          this.setState({\n            ctaArrayIndexPosition: parseInt(arrPosition)\n          })\n        }\n      }else if(e.target.id.includes('text-input-ctaText_') || e.target.id.includes('text-input-ctaLink_')){\n        // target only [0] cta / href\n        this.setState({\n          ctaArrayIndexPosition: 0\n        })\n      }\n    }\n    // if(e.target.id.nodeValue.includes('text-input-ctaText') || e.target.id.nodeValue.includes('text-input-ctaLink')){\n    //   alert('true');\n    // }\n  }\n\n  handleBrand(e){\n    this.setState({\n      brandName: e.target.value\n    })\n  }\n\n// Welcome to Prop drilling....\n// We need to get the position X, Y data to update the JSON.\n// The data is coming from Draggable comp. three levels deep\n// Future update to use Contex API\n\ncallbackPositionFunction = (x,y) => {\n    this.setState({\n      positionX: x,\n      positionY:y\n     \n    });\n    // update json with new positions\n    this.state.jsonValue.data.linksContainerStyle.desktop.left = this.state.positionX;\n    this.state.jsonValue.data.linksContainerStyle.desktop.top = this.state.positionY;\n    this.setState({\n      jsonValue: this.state.jsonValue\n    });\n    this.parseJson();\n  }\n\n  // update the CTA object in JSON - this call is originating from OptionCTA component\n\n  async addCtaArr(ctaContentArr, ctaCount){\n   await this.setState({\n      ctaAddedContentArr: ctaContentArr,\n      ctaCounter: ctaCount\n \n    });\n    this.updateCTA_from_OptionCTA();\n  }\n\n  async rmvCtaArr(ctaContentArr, ctaCount){\n    await this.setState({\n      ctaAddedContentArr: ctaContentArr,\n      ctaCounter: ctaCount\n    });\n    this.removeCTA_from_OptionCTA();\n  }\n\n  async removeCTA_from_OptionCTA(){\n\n    if(!this.state.isDropdown){\n      this.state.jsonValue.data.links.content.pop();\n      await this.setState({\n        updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA,\n        jsonValue: this.state.jsonValue\n       });\n       this.parseJson();\n    }else{\n      this.state.jsonValue.data.links.content[0].submenu.pop();\n      await this.setState({\n        updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA,\n        jsonValue: this.state.jsonValue\n       });\n       this.parseJson();\n    }\n  }\n\n\n  updateCTA_from_OptionCTA(){\n  \n    /*\n        1. Creating a new object from added CTAs and appeding it to the jsonValue text.\n        2. We need to update this.state.jsonValue.data.links.content with the new object\n    */ \n    for(let item of this.state.ctaAddedContentArr){\n      if(item.hasOwnProperty('props')){\n        for(let name of item.props.children){\n          if(item.hasOwnProperty('props')){\n            for(let content of name.props.children){\n              if(content !== 'undefined'){\n                if(content.hasOwnProperty('props')){\n                  if(content.props.hasOwnProperty('data-added_cta')){\n                    // Assigning new properties inside the object\n                    if(content.props['data-added_cta'] === 'textAdded'){\n                        updatedCTAObjFromOptionCTA.text = content.props.defaultValue;\n                      }\n                    if(content.props['data-added_cta'] === 'hrefAdded'){\n                        updatedCTAObjFromOptionCTA.href = content.props.defaultValue;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n\n  if(!this.state.isDropdown){\n     // Check if both \"text\" and \"href\" properties are updatedCTAObjFromOptionCTA object \n    if(updatedCTAObjFromOptionCTA.hasOwnProperty('text') && updatedCTAObjFromOptionCTA.hasOwnProperty('href')){\n    // update state with new object\n    this.setState({\n      updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA\n    });\n    // push new CTA object into array and update state on jsonValue. (This is the string json on the right)\n     this.state.jsonValue.data.links.content.push(this.state.updatedCTAObjFromOptionCTAState);\n    this.setState({\n     jsonValue: this.state.jsonValue\n    });\n    this.parseJson();\n    }\n  }else{\n    if(updatedCTAObjFromOptionCTA.hasOwnProperty('text') && updatedCTAObjFromOptionCTA.hasOwnProperty('href')){\n      this.setState({\n        updatedCTAObjFromOptionCTAState: updatedCTAObjFromOptionCTA\n      });\n      this.state.jsonValue.data.links.content[0].submenu.push(this.state.updatedCTAObjFromOptionCTAState);\n      this.setState({\n        jsonValue: this.state.jsonValue\n       });\n       this.parseJson();\n    }\n  }\n}\n\n\n  // current dropdown status checkbox\n  dropdownSelected(e, currentState){\n    this.setState({\n        isDropdown: !currentState\n    });\n    this.createDropdown(!currentState);\n\n  }\n  \n    createDropdown(status){\n     if(status){\n      // constructing new dropdown object\n      const heading = {\"heading\":{ \"text\":\"Shop women's top denim\"},\"submenu\":[...this.state.jsonValue.data.links.content]};\n      const links = Object.assign({\"type\":\"dropdown\",\"content\":[heading], \"style\":{...this.state.jsonValue.data.links.style}});\n\n      const updatedObj = Object.assign(links);\n\n       this.setState({\n        jsonValue: this.state.jsonValue.data.links = updatedObj \n      });\n       this.setState({\n        jsonValue: this.state.jsonValue\n      });\n       this.parseJson();\n    }else{\n      const copyOfContentArrayObj = [...this.state.jsonValue.data.links.content[0].submenu];\n      const links = Object.assign({\"style\":{...this.state.jsonValue.data.links.style},\"content\": copyOfContentArrayObj});\n\n      this.setState({\n        jsonValue: this.state.jsonValue.data.links = links \n      });\n       this.setState({\n        jsonValue: this.state.jsonValue\n      });\n       this.parseJson();  \n    }\n  }\n\n  // header input for dropdown\n  handleHeaderInputDropdownChange(e){\n    this.setState({\n      headerDropdownInputValue: this.state.jsonValue.data.links.content[0].heading.text = e.target.value\n    })\n  }\n\n  render() {  \n\n  return(\n      <Fragment>\n        <div className=\"DataGeneral\" >\n          <h1>{this.state.message}</h1>\n        <span className=\"select-dropdown\">\n              <select onChange={this.handleBrand}>\n                <option>Select Brand</option>\n                {Object.entries(this.state.brand.brand[0]).map((name, index) => {\n                  return <option key={'brand_'+index} value={name[1]}>{name[0]}</option>;\n                })}\n              </select>\n          </span>\n          <span className=\"select-dropdown\">\n              <select onChange={this.parseJson}><option>Select Template</option>\n                <option value={this.state.jsonValue.name}>{this.state.jsonValue.name}</option>\n              </select>\n          </span>\n          <div className=\"SelectForm\">\n            <Fragment>\n              <div className=\"leftDiv\">\n              <form\n               onChange={this.elemUpdatedInForm}\n               onKeyUp={this.focusElem}\n               onBlur={this.focusElem}\n               onClick={this.focusElem}>\n                {this.state.elem}\n                {/* Option CTA component for advanced settings */}\n                <OptionCTA display={this.state.display} visibility={this.state.visibility}\n                 jsonOption={this.state.jsonValue.data.links}\n                 addCtaArr={this.addCtaArr.bind(this)}\n                 rmvCtaArr={this.rmvCtaArr.bind(this)}\n                 dropdownSelected={this.dropdownSelected.bind(this)}\n                 handleHeaderInputDropdownChange={this.handleHeaderInputDropdownChange.bind(this)}/>\n\n               </form>\n              </div>\n            </Fragment>\n           <Fragment>\n            <div className=\"rightDiv\">\n\n              <ImgPreview \n                imgData={this.state.jsonValue} \n                visibility={this.state.visibility}\n                display={this.state.display}  \n                brandName={this.state.brandName} \n                parentPositioningCallback = {this.callbackPositionFunction.bind(this)}\n                dropdownSelected={this.dropdownSelected.bind(this)} \n                ><p> {this.state.positionX} </p><p> {this.state.positionY} </p></ImgPreview>\n\n              <PlainJson\n                json={this.state.jsonDataRaw}\n                detect={this.state.changedDetected}\n                markup={this.state.markup}\n                jsonValue={this.state.jsonValue}\n                visibility={this.state.visibility}/>\n            </div>\n           </Fragment> \n          </div>\n        </div>\n        <div>\n          <h6>Last Change</h6>\n          <ListItem \n            name={this.state.changedDetected} \n            list={this.state.markup} \n            customName={this.state.customName} />\n        </div>\n      </Fragment>\n    );\n\n  }\n}\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}