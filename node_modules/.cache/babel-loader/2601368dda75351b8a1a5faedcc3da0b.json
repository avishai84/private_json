{"ast":null,"code":"import _assertThisInitialized from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/DataGeneral.js\";\nimport React, { Component, Fragment } from 'react';\nimport jsonData from './marketing_json/svgOverlay.json';\nimport './DataGeneral.scss';\nvar json = JSON.parse(JSON.stringify(jsonData));\n\nvar ImgPreview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImgPreview, _Component);\n\n  function ImgPreview(props) {\n    var _this;\n\n    _classCallCheck(this, ImgPreview);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImgPreview).call(this, props));\n    _this.state = {\n      svg: _this.props.svg,\n      img: _this.props.img,\n      linksText: _this.prop,\n      elemChange: _this.props.elemChange\n    };\n    return _this;\n  }\n\n  _createClass(ImgPreview, [{\n    key: \"render\",\n    value: function render() {\n      var smallSvg = \"https://www.gol.wip.gidapps.com\".concat(this.state.svg.smallImg);\n      var largeSvg = \"https://www.gol.wip.gidapps.com\".concat(this.state.svg.largeImg);\n      var smallImg = \"https://www.gol.wip.gidapps.com\".concat(this.state.img.smallImg);\n      var largeImg = \"https://www.gol.wip.gidapps.com\".concat(this.state.img.largeImg);\n      var href = this.props.linksText[0].href;\n      var text = this.props.linksText[0].text; //  console.log(this.state.img.largeImg);\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imgPreview\",\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mkt-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width:767px)\",\n        srcSet: smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        alt: this.state.img.altText,\n        src: largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"absolute leftTop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width: 767px)\",\n        srcSet: smallSvg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: largeSvg,\n        alt: this.state.svg.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return ImgPreview;\n}(Component);\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(ListItem, _Component2);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListItem).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        style: {\n          \"fontSize\": \"12px\",\n          \"color\": \"orange\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, this.props.customName, \" \", this.props.name), \"\\xA0\", React.createElement(\"small\", {\n        style: {\n          \"fontSize\": \"12px\",\n          \"color\": \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.props.list));\n    }\n  }]);\n\n  return ListItem;\n}(Component);\n\nvar PlainJson =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(PlainJson, _Component3);\n\n  function PlainJson(props) {\n    var _this2;\n\n    _classCallCheck(this, PlainJson);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(PlainJson).call(this, props));\n    _this2.state = {\n      json: _this2.props,\n      changedDetected: _this2.props,\n      markup: _this2.props,\n      jsonValue: _this2.props,\n      jsonStringify: JSON.stringify(_this2.jsonValue, null, 2),\n      clicked: '',\n      customName: _this2.props\n    };\n    return _this2;\n  }\n\n  _createClass(PlainJson, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"rightDiv\",\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"textarea-a--json\",\n        className: \"sds_field sds-js_input-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        disabled: \"disabled\",\n        id: \"textarea-a--json\",\n        value: JSON.stringify(this.state.jsonValue.json, null, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return PlainJson;\n}(Component);\n\n;\n\nvar DataGeneral =\n/*#__PURE__*/\nfunction (_Component4) {\n  _inherits(DataGeneral, _Component4);\n\n  function DataGeneral(props) {\n    var _this3;\n\n    _classCallCheck(this, DataGeneral);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(DataGeneral).call(this, props));\n    _this3.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility: 'hidden'\n    };\n    _this3.parseJson = _this3.parseJson.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.toUpdate = _this3.toUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.createMarkup = _this3.createMarkup.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.elemUpdatedInForm = _this3.elemUpdatedInForm.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    _this3.focusElem = _this3.focusElem.bind(_assertThisInitialized(_assertThisInitialized(_this3)));\n    return _this3;\n  } // Create HTML template from json\n\n\n  _createClass(DataGeneral, [{\n    key: \"parseJson\",\n    value: function parseJson() {\n      var _this4 = this;\n\n      var origJson = json;\n      var jsonNew = this.state.jsonValue;\n      var ctaLinksArray = origJson.data.links.content;\n      var linkInputs = '';\n      var instanceHtml = '';\n      instanceHtml = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: origJson.instanceDesc.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"instance Desc:\", React.createElement(\"input\", {\n        \"data-instancename\": \"instanceDesc\",\n        id: origJson.instanceDesc.replace(/\\s/g, ''),\n        type: \"text\",\n        placeholder: origJson.instanceDesc,\n        defaultValue: origJson.instanceDesc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"experimentRunning:\", React.createElement(\"select\", {\n        \"data-instancename\": \"experimentRunning\",\n        id: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        defaultValue: jsonNew.experimentRunning.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"true\"), React.createElement(\"option\", {\n        value: !jsonNew.experimentRunning.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"false\"))), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"background properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"background altText:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"background\",\n        id: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.altText,\n        placeholder: origJson.data.background.content.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"background largeImg:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"background\",\n        id: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.largeImg,\n        placeholder: origJson.data.background.content.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"background smallImg:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"background\",\n        id: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.smallImg,\n        placeholder: origJson.data.background.content.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"svgoverlay properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"svgoverlay altText:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.altText,\n        placeholder: origJson.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, \"svgoverlay largeImg:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: jsonNew.data.svgoverlay.largeImg,\n        placeholder: origJson.data.svgoverlay.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"svgoverlay smallImg:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: jsonNew.data.svgoverlay.smallImg,\n        placeholder: origJson.data.svgoverlay.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"CTA links\"), linkInputs = ctaLinksArray.map(function (item, index) {\n        return React.createElement(\"div\", {\n          key: \"__wrp_text\".concat(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          key: \"__key_text\".concat(index),\n          htmlFor: \"__text\".concat(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, \"Text:\", React.createElement(\"input\", {\n          \"data-instancename\": \"text\",\n          id: \"__text\".concat(index),\n          name: \"text\",\n          placeholder: item.text,\n          defaultValue: item.text,\n          onFocus: _this4.elemUpdatedInForm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        })), React.createElement(\"label\", {\n          key: \"__key_href\".concat(index),\n          htmlFor: \"__href\".concat(index),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, \"href:\", React.createElement(\"input\", {\n          \"data-instancename\": \"href\",\n          id: \"__href\".concat(index),\n          name: \"href\",\n          placeholder: item.href,\n          defaultValue: item.href,\n          onFocus: _this4.elemUpdatedInForm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        })));\n      }));\n      this.setState({\n        visibility: 'visible'\n      });\n      this.toUpdate(instanceHtml);\n    } // Update the new HTML state\n\n  }, {\n    key: \"toUpdate\",\n    value: function toUpdate(instanceHtml) {\n      this.setState({\n        elem: instanceHtml\n      });\n      this.createMarkup();\n    } // Convert string to HTML and set in DOM\n\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup() {\n      return {\n        __html: this.state.elem\n      };\n    } // Detect change on the form\n\n  }, {\n    key: \"elemUpdatedInForm\",\n    value: function elemUpdatedInForm(e) {\n      // console.dir(e.target);\n      this.setState({\n        changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n        markup: e.target.value,\n        customName: e.target.dataset.instancename\n      }); // write changes to json\n\n      this.makeChangesJson();\n    }\n  }, {\n    key: \"makeChangesJson\",\n    value: function makeChangesJson() {\n      var _this5 = this;\n\n      var deepChange = this.state.jsonValue;\n      setTimeout(function () {\n        // changing json new value\n        var currentChange = _this5.state.jsonValue[_this5.state.customName]; //console.log(this.state.customName);\n\n        if (_this5.state.customName === 'experimentRunning') {\n          currentChange = currentChange ? _this5.state.jsonValue[_this5.state.customName] = false : _this5.state.jsonValue[_this5.state.customName] = true; // console.log(`2: ${currentChange}`);\n        }\n\n        if (_this5.state.customName === 'instanceDesc') {\n          _this5.state.jsonValue[_this5.state.customName] = _this5.state.markup; //console.log(`3: ${currentChange}`);\n        } // Background Image, Alt\n\n\n        if (_this5.state.targetName === 'background') {\n          if (deepChange.data.background.content[_this5.state.customName]) {\n            _this5.state.jsonValue.data.background.content[_this5.state.customName] = _this5.state.markup;\n          }\n        } // svgoverlay Image, SVG, Alt\n\n\n        if (_this5.state.targetName === 'svgoverlay') {\n          if (deepChange.data.svgoverlay[_this5.state.customName]) {\n            _this5.state.jsonValue.data.svgoverlay[_this5.state.customName] = _this5.state.markup;\n          }\n        } // links - CTAthis\n\n\n        if (_this5.state.customName === 'href') {\n          deepChange.data.links.content.map(function (element, index) {\n            return element[_this5.state.customName] = _this5.state.markup;\n          });\n        }\n\n        if (_this5.state.customName === 'text') {\n          deepChange.data.links.content.map(function (element, index) {\n            return element[_this5.state.customName] = _this5.state.markup;\n          });\n        }\n\n        _this5.setState({\n          jsonValue: _this5.state.jsonValue\n        });\n\n        _this5.parseJson();\n      }, 50);\n    } // globalOnChange(e){\n    //   console.log(e.target.value);\n    // }\n\n  }, {\n    key: \"focusElem\",\n    value: function focusElem(e) {\n      // this fn helps identify which input elem we are changing\n      // console.log(e.target.name);\n      this.setState({\n        targetName: e.target.name\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // console.log(this.state.jsonValue);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DataGeneral\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          \"visibility\": \"\".concat(this.state.visibility == 'hidden' ? 'visible' : 'hidden')\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, \"JSON will show here\"), React.createElement(\"select\", {\n        onChange: this.parseJson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        defaultValue: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, \"JSON Modules\"), React.createElement(\"option\", {\n        value: this.state.jsonValue.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, this.state.jsonValue.name)), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          \"display\": \"flex\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onChange: this.elemUpdatedInForm,\n        onKeyDown: this.focusElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 302\n        },\n        __self: this\n      }, this.state.elem))), React.createElement(PlainJson, {\n        json: this.state.jsonDataRaw,\n        detect: this.state.changedDetected,\n        markup: this.state.markup,\n        jsonValue: this.state.jsonValue,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      })), React.createElement(ImgPreview, {\n        svg: this.state.jsonValue.data.svgoverlay,\n        img: this.state.jsonValue.data.background.content,\n        linksText: this.state.jsonValue.data.links.content,\n        elemChange: this.state.elem,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 310\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 312\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"Last Change\"), React.createElement(ListItem, {\n        name: this.state.changedDetected,\n        list: this.state.markup,\n        customName: this.state.customName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DataGeneral;\n}(Component);\n\nexport default DataGeneral;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/DataGeneral.js"],"names":["React","Component","Fragment","jsonData","json","JSON","parse","stringify","ImgPreview","props","state","svg","img","linksText","prop","elemChange","smallSvg","smallImg","largeSvg","largeImg","href","text","visibility","altText","ListItem","customName","name","list","PlainJson","changedDetected","markup","jsonValue","jsonStringify","clicked","DataGeneral","elem","jsonDataRaw","targetName","parseJson","bind","toUpdate","createMarkup","elemUpdatedInForm","focusElem","origJson","jsonNew","ctaLinksArray","data","links","content","linkInputs","instanceHtml","instanceDesc","replace","experimentRunning","toString","background","svgoverlay","map","item","index","setState","__html","e","target","nodeName","toLowerCase","value","dataset","instancename","makeChangesJson","deepChange","setTimeout","currentChange","element"],"mappings":"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","sourcesContent":["import React, {\n  Component,\n  Fragment\n} from 'react';\nimport jsonData from './marketing_json/svgOverlay.json';\nimport './DataGeneral.scss';\nlet json = JSON.parse(JSON.stringify(jsonData));\n\nclass ImgPreview extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      svg: this.props.svg,\n      img: this.props.img,\n      linksText: this.prop,\n      elemChange:this.props.elemChange\n    };\n  }\n\n\n  render() {\n    const smallSvg = `https://www.gol.wip.gidapps.com${this.state.svg.smallImg}`;\n    const largeSvg = `https://www.gol.wip.gidapps.com${this.state.svg.largeImg}`;\n    const smallImg = `https://www.gol.wip.gidapps.com${this.state.img.smallImg}`;\n    const largeImg = `https://www.gol.wip.gidapps.com${this.state.img.largeImg}`;\n    const href =this.props.linksText[0].href;\n    const text = this.props.linksText[0].text;\n    \n  //  console.log(this.state.img.largeImg);\n\n    return ( \n      <Fragment>\n        <div className=\"imgPreview\" style={{\"visibility\":`${this.props.visibility}`}}>\n          <div className=\"mkt-image\">\n            <picture>\n              <source media=\"(max-width:767px)\" srcSet={smallImg} />\n                <img alt={this.state.img.altText} src={largeImg}/>\n              </picture>\n            </div>\n            <div className=\"absolute leftTop\">\n              <picture>\n                <source media=\"(max-width: 767px)\" srcSet={smallSvg}/>\n                <img src={largeSvg} alt={this.state.svg.altText}/>\n              </picture>\n            </div>  \n            {/* Links cta */}\n            {/* <a onMouseDown={this.mouseDownHandler} onMouseUp={this.mouseUpHandler} className=\"absolute\" href={href}><span>{text}</span></a> */}\n          </div>\n        </Fragment>\n\n      );\n    }\n}\n\nclass ListItem extends Component {\n  render() {\n    return ( \n      <Fragment>\n\t      <small style={{ \"fontSize\": \"12px\", \"color\": \"orange\" }}>{this.props.customName} {this.props.name}</small>&nbsp;\n\t\t\t  <small style={{ \"fontSize\": \"12px\", \"color\": \"red\" }}>{this.props.list}</small>\n\t\t\t</Fragment>\n    );\n  }\n}\nclass PlainJson extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: this.props,\n      changedDetected: this.props,\n      markup: this.props,\n      jsonValue: this.props,\n      jsonStringify: JSON.stringify(this.jsonValue, null, 2),\n      clicked: '',\n      customName:this.props\n    };\n  }\n\n  render() {\n\n    return (\n      <div className=\"rightDiv\" style={{\"visibility\":`${this.props.visibility}`}}>\n        <Fragment>\n          <label htmlFor=\"textarea-a--json\" className=\"sds_field sds-js_input-control\">\n            <textarea disabled=\"disabled\" id=\"textarea-a--json\" value={ JSON.stringify(this.state.jsonValue.json, null, 2) }>\n            </textarea>\n          </label>\n        </Fragment>\n      </div>\n    );\n  }\n};\n\nclass DataGeneral extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility:'hidden'\n    }\n    this.parseJson = this.parseJson.bind(this);\n    this.toUpdate = this.toUpdate.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n    this.elemUpdatedInForm = this.elemUpdatedInForm.bind(this);\n    this.focusElem = this.focusElem.bind(this);\n  }\n  // Create HTML template from json\n  parseJson() {\n    const origJson = json;\n    let jsonNew = this.state.jsonValue;\n    let ctaLinksArray = origJson.data.links.content;\n    let linkInputs = '';\n    let instanceHtml = '';\n    \n    instanceHtml = \n      <div>\n        <label htmlFor={origJson.instanceDesc.replace(/\\s/g, '')}>\n          instance Desc:\n          <input data-instancename='instanceDesc' id={origJson.instanceDesc.replace(/\\s/g, '')} type=\"text\" placeholder={origJson.instanceDesc} defaultValue={origJson.instanceDesc}/>\n        </label>\n\n        <label htmlFor=\"__experimentRunning\">\n        experimentRunning:\n          <select data-instancename='experimentRunning' id=\"__experimentRunning\">\n            <option defaultValue={jsonNew.experimentRunning.toString()}> \n              {\"true\"}\n            </option>\n            <option value={!jsonNew.experimentRunning.toString()}>\n            {\"false\"}\n            </option>\n            {/* <option value={(jsonNew.experimentRunning.toString() === true) ? false: false}>\n            {(!jsonNew.experimentRunning.toString() === true) ? \"false\": \"true\"}\n            </option> */}\n          </select>\n        </label>\n\n        <h5>background properties</h5>\n        <label htmlFor={origJson.data.background.content.altText.replace(/\\s/g, '')}>\n          background altText:\n        <input data-instancename='altText' name=\"background\" id={origJson.data.background.content.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.altText} placeholder={origJson.data.background.content.altText} />\n        </label>\n\n        <label htmlFor={origJson.data.background.content.largeImg.replace(/\\s/g, '')}>\n            background largeImg:\n          <input data-instancename='largeImg' name=\"background\" id={origJson.data.background.content.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.largeImg} placeholder={origJson.data.background.content.largeImg} />\n        </label>\n\n        <label htmlFor={origJson.data.background.content.smallImg.replace(/\\s/g, '')}>\n          background smallImg:\n        <input data-instancename='smallImg' name=\"background\" id={origJson.data.background.content.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.smallImg} placeholder={origJson.data.background.content.smallImg} />\n        </label>\n\n        <h5>svgoverlay properties</h5>\n        <label htmlFor={origJson.data.svgoverlay.altText.replace(/\\s/g, '')}>\n          svgoverlay altText:\n           <input data-instancename='altText' name=\"svgoverlay\" id={origJson.data.svgoverlay.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.altText} placeholder={origJson.data.svgoverlay.altText} />\n        </label>\n\n        <label htmlFor={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')}>\n          svgoverlay largeImg:\n          <input data-instancename='largeImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={jsonNew.data.svgoverlay.largeImg} placeholder={origJson.data.svgoverlay.largeImg} />\n        </label>\n\n        <label htmlFor={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')}>\n          svgoverlay smallImg:\n         <input data-instancename='smallImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={jsonNew.data.svgoverlay.smallImg} placeholder={origJson.data.svgoverlay.smallImg} />\n       </label>\n\n       <h5>CTA links</h5>\n\n      {linkInputs = ctaLinksArray.map((item, index) => {\n        return (\n        <div key={`__wrp_text${index}`}>\n            <label key={`__key_text${index}`} htmlFor={`__text${index}`}>Text:\n            <input data-instancename=\"text\" id={`__text${index}`} name=\"text\" placeholder={item.text} defaultValue={item.text} onFocus={this.elemUpdatedInForm}/>\n            </label>\n            <label key={`__key_href${index}`} htmlFor={`__href${index}`}>href:\n            <input data-instancename=\"href\" id={`__href${index}`} name=\"href\" placeholder={item.href} defaultValue={item.href} onFocus={this.elemUpdatedInForm}/>\n            </label>\n        </div>\n        );\n      })}\n     \n      </div>;\n\n\n    this.setState({\n      visibility: 'visible'\n    })\n    this.toUpdate(instanceHtml);\n  }\n  // Update the new HTML state\n  toUpdate(instanceHtml) {\n    this.setState({\n      elem: instanceHtml\n    });\n    this.createMarkup();\n  }\n\n  // Convert string to HTML and set in DOM\n  createMarkup() {\n    return {\n      __html: this.state.elem\n    };\n  }\n\n  // Detect change on the form\n  elemUpdatedInForm(e) {\n    // console.dir(e.target);\n    this.setState({\n      changedDetected: `${e.target.nodeName.toLowerCase()}`,\n      markup: e.target.value,\n      customName: e.target.dataset.instancename\n    });\n\n    // write changes to json\n    this.makeChangesJson();\n  }\n  makeChangesJson() {\n    let deepChange = this.state.jsonValue;\n\n    setTimeout(() => {\n      // changing json new value\n      let currentChange = this.state.jsonValue[this.state.customName];\n \n      //console.log(this.state.customName);\n      if (this.state.customName === 'experimentRunning') {\n        currentChange = currentChange ? (this.state.jsonValue[this.state.customName] = false) : (this.state.jsonValue[this.state.customName] = true);\n        // console.log(`2: ${currentChange}`);\n      }\n      if (this.state.customName === 'instanceDesc') {\n        this.state.jsonValue[this.state.customName] = this.state.markup;\n        //console.log(`3: ${currentChange}`);\n      }\n      // Background Image, Alt\n     \n      if (this.state.targetName === 'background') {\n     \n        if (deepChange.data.background.content[this.state.customName]) {\n          this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup;\n        }\n      }\n      // svgoverlay Image, SVG, Alt\n      if (this.state.targetName === 'svgoverlay') {\n        if (deepChange.data.svgoverlay[this.state.customName]) {\n          this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup;\n        }\n\n      }\n      // links - CTAthis\n      if (this.state.customName === 'href') {\n        deepChange.data.links.content.map((element, index) => {\n          return element[this.state.customName]= this.state.markup;\n        });\n      }\n      if (this.state.customName === 'text') {\n  \n        deepChange.data.links.content.map((element, index) => {\n         return element[this.state.customName]= this.state.markup;\n        });\n\n      }\n\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n \n      this.parseJson();\n    }, 50);\n  }\n\n  // globalOnChange(e){\n  //   console.log(e.target.value);\n  // }\n  focusElem(e) {\n    // this fn helps identify which input elem we are changing\n    // console.log(e.target.name);\n    this.setState({\n      targetName: e.target.name\n    })\n  }\n  render() {\n    // console.log(this.state.jsonValue);\n    return(\n      <Fragment>\n        <div className=\"DataGeneral\">\n          <p style={{\"visibility\":`${(this.state.visibility) == 'hidden' ? 'visible': 'hidden'}`}}>JSON will show here</p>\n          <select onChange={this.parseJson} >\n            <option defaultValue>JSON Modules</option>\n            <option value={this.state.jsonValue.name}>{this.state.jsonValue.name}</option>\n          </select>\n          <br/>\n          <Fragment>\n            {/* onInput={this.elemUpdatedInForm} */}\n            <div style={{ \"display\": \"flex\" }} >  \n               <form onChange={this.elemUpdatedInForm} onKeyDown={this.focusElem}>\n                 {this.state.elem}\n               </form>\n            </div>\n          </Fragment>\n          <PlainJson json={this.state.jsonDataRaw} detect={this.state.changedDetected} markup={this.state.markup} jsonValue={this.state.jsonValue} visibility={this.state.visibility}/>\n        </div>\n\n        <ImgPreview svg={this.state.jsonValue.data.svgoverlay} img={this.state.jsonValue.data.background.content} linksText={this.state.jsonValue.data.links.content} elemChange={this.state.elem} visibility={this.state.visibility}/>\n\n        <div>\n          <h6>Last Change</h6> \n          <ListItem name={this.state.changedDetected} list={this.state.markup} customName={this.state.customName} />\n        </div>\n      </Fragment>\n    );\n\n  }\n}\n\nexport default DataGeneral;"]},"metadata":{},"sourceType":"module"}