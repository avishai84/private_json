{"ast":null,"code":"import _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/imgpreview/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport DraggableComp from '../draggable_cta';\n\nvar ImgPreview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImgPreview, _Component);\n\n  function ImgPreview(props) {\n    var _this;\n\n    _classCallCheck(this, ImgPreview);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImgPreview).call(this, props));\n\n    _this.positionsFromDraggable = function (x, y) {\n      _this.setState({\n        positionX: x,\n        positionY: y,\n        imgNaturallSize: _this.props.imgData.data.background.content.largeImg,\n        brandUpdate: _this.props.brandName\n      });\n\n      _this.props.parentPositioningCallback(_this.state.positionX, _this.state.positionY); // natural width/height values of image to help calc. CTA '%' position\n\n\n      var updateImgWidthHeight = function updateImgWidthHeight() {\n        _this.setState({\n          imgNaturallWidth: _this._image.naturalWidth,\n          imgNaturallHeight: _this._image.naturalHeight\n        });\n      };\n\n      updateImgWidthHeight();\n    };\n\n    _this.state = {\n      imgData: _this.props.imgData,\n      linksText: _this.prop,\n      elemChange: _this.props.elemChange,\n      jsonValue: _this.props.jsonValue,\n      isChecked: _this.props,\n      brandUpdate: '',\n      imgUrl: '',\n      positionX: '',\n      positionY: '',\n      imgNaturallWidth: '',\n      imgNaturallHeight: ''\n    };\n    return _this;\n  }\n\n  _createClass(ImgPreview, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        imgUrl: nextProps.brandName\n      });\n    } // Welcome to Prop drilling....\n    // We need to get the position X, Y data to update the JSON.\n    // The data is coming from Draggable comp. three levels deep\n    // Future update to use Contex API\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var smallSvg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.svgoverlay.smallImg);\n      var largeSvg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.svgoverlay.largeImg);\n      var smallImg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.background.content.smallImg);\n      var largeImg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.background.content.largeImg); //console.log('ImgPreview ',this.props);\n      // set context for ref. DOM elem.\n      // For more info, see video: https://www.youtube.com/watch?v=VyMziBh4SYM\n\n      var self = this;\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"imgPreview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mkt-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width:767px)\",\n        srcSet: smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        alt: this.state.imgData.data.background.content.altText,\n        src: largeImg //  Getting a reference to the image as DOM elem to calc. width/height for boundaries of draggable CTA\n        ,\n        ref: function ref(el) {\n          self._image = el;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"absolute leftTop foo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(DraggableComp, {\n        desktopStyles: this.state.imgData.data.links.style.desktop,\n        parentPositioningFromDraggbleCallback: this.positionsFromDraggable.bind(this),\n        imgNaturalWidth: this.state.imgNaturallWidth,\n        imgNaturalHeight: this.state.imgNaturallHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, this.state.imgData.data.links.content[0].text)), React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width: 767px)\",\n        srcSet: smallSvg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: largeSvg,\n        alt: this.state.imgData.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ImgPreview;\n}(Component);\n\nexport default ImgPreview;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/imgpreview/index.js"],"names":["React","Component","Fragment","DraggableComp","ImgPreview","props","positionsFromDraggable","x","y","setState","positionX","positionY","imgNaturallSize","imgData","data","background","content","largeImg","brandUpdate","brandName","parentPositioningCallback","state","updateImgWidthHeight","imgNaturallWidth","_image","naturalWidth","imgNaturallHeight","naturalHeight","linksText","prop","elemChange","jsonValue","isChecked","imgUrl","nextProps","smallSvg","svgoverlay","smallImg","largeSvg","self","visibility","altText","el","links","style","desktop","bind","text"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react';\nimport DraggableComp from '../draggable_cta';\n\n\nclass ImgPreview extends Component {\n\n    constructor(props){\n      super(props);\n      this.state={\n        imgData: this.props.imgData,\n        linksText: this.prop,\n        elemChange:this.props.elemChange,\n        jsonValue : this.props.jsonValue,\n        isChecked : this.props,\n        brandUpdate: '',\n        imgUrl: '',\n        positionX: '',\n        positionY: '',\n        imgNaturallWidth:'',\n        imgNaturallHeight:''\n      };\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.setState({imgUrl:nextProps.brandName});\n  }\n\n  // Welcome to Prop drilling....\n  // We need to get the position X, Y data to update the JSON.\n  // The data is coming from Draggable comp. three levels deep\n  // Future update to use Contex API\n\n  positionsFromDraggable = (x,y) => {\n        this.setState({\n          positionX:x,\n          positionY:y,\n          imgNaturallSize: this.props.imgData.data.background.content.largeImg,\n          brandUpdate: this.props.brandName\n        })\n      this.props.parentPositioningCallback(this.state.positionX,this.state.positionY);\n     // natural width/height values of image to help calc. CTA '%' position\n      const updateImgWidthHeight = () => {\n        this.setState({\n          imgNaturallWidth:this._image.naturalWidth,\n          imgNaturallHeight: this._image.naturalHeight\n        });\n       };\n\n       updateImgWidthHeight();\n \n    }\n\n    render() {\n\n      const smallSvg = `${this.state.imgUrl}${this.state.imgData.data.svgoverlay.smallImg}`;\n      const largeSvg = `${this.state.imgUrl}${this.state.imgData.data.svgoverlay.largeImg}`;\n      const smallImg = `${this.state.imgUrl}${this.state.imgData.data.background.content.smallImg}`;\n      const largeImg = `${this.state.imgUrl}${this.state.imgData.data.background.content.largeImg}`;\n      //console.log('ImgPreview ',this.props);\n      // set context for ref. DOM elem.\n      // For more info, see video: https://www.youtube.com/watch?v=VyMziBh4SYM\n\n      let self = this;\n\n      return (\n        <Fragment>\n          <div style={{\"visibility\":`${this.props.visibility}`}}>\n            <div className=\"imgPreview\" >\n              <div className=\"mkt-image\">\n                <picture>\n                  <source media=\"(max-width:767px)\" srcSet={smallImg} />\n                    <img alt={this.state.imgData.data.background.content.altText} src={largeImg}\n                      //  Getting a reference to the image as DOM elem to calc. width/height for boundaries of draggable CTA\n                       ref={\n                          function(el){\n                            self._image = el;\n                          }\n                        }\n                    />\n                  </picture>\n                </div>\n                <div className=\"absolute leftTop foo\">\n                <DraggableComp\n                 desktopStyles={this.state.imgData.data.links.style.desktop}\n                 parentPositioningFromDraggbleCallback={this.positionsFromDraggable.bind(this)}\n                 imgNaturalWidth={this.state.imgNaturallWidth}\n                 imgNaturalHeight={this.state.imgNaturallHeight}>\n\n                    <div >{this.state.imgData.data.links.content[0].text}</div>\n                  </DraggableComp>\n                  <picture>\n                    <source media=\"(max-width: 767px)\" srcSet={smallSvg}/>\n                    <img src={largeSvg} alt={this.state.imgData.data.svgoverlay.altText}/>\n                  </picture>\n                </div>\n              </div>\n            </div>\n          </Fragment>\n\n        );\n      }\n  }\n\n  export default ImgPreview;\n"]},"metadata":{},"sourceType":"module"}