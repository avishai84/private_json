{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/content/OptionCTA.js\";\nimport React, { Component, Fragment } from 'react';\nvar newArr = [];\n\nvar OptionCTA =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OptionCTA, _Component);\n\n  function OptionCTA(props) {\n    var _this;\n\n    _classCallCheck(this, OptionCTA);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OptionCTA).call(this, props));\n    _this.state = {\n      json: _this.props.jsonOption.content,\n      ctaNum: 0,\n      ctaContent: newArr,\n      isDropdown: false,\n      ctaArr: newArr.length,\n      lengthCtaArr: _this.props.jsonOption.content.length,\n      ctaCount: 1\n    };\n    return _this;\n  } // shouldComponentUpdate(nextProps, nextState) {\n  //     console.log('nextState: '+nextState.isDropdown?true:false);\n  //     console.log('nextState: '+nextProps.isDropdown?true:false);\n  // }\n  // componentWillReceiveProps(nextProps) {\n  //    // console.log('nextProps: '+nextProps.newArr);\n  //    // this.setState({ctaContent: nextProps.newArr});\n  // }\n  // componentWillRecieveProps(newProps) \n  // { \n  //     if (this.props !== newProps) { \n  //         console.log(\" New Props have been assigned \"); \n  //         // Use this.setState() to rerender the page. \n  //     } \n  // } \n\n\n  _createClass(OptionCTA, [{\n    key: \"addingCta\",\n    value: function () {\n      var _addingCta = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(e) {\n        var _this2 = this;\n\n        var linkInputs, linkInputsObj;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // adding a duplicate of the array from this.props.jsonOption.content\n                e.preventDefault();\n                linkInputs = this.state.json.map(function (item, index) {\n                  return React.createElement(\"div\", {\n                    key: 'added_Cta' + _this2.state.ctaCount,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 43\n                    },\n                    __self: this\n                  }, React.createElement(\"label\", {\n                    key: \"key_Text\" + _this2.state.ctaCount,\n                    htmlFor: \"text-input-ctaText_\" + _this2.state.ctaCount,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 43\n                    },\n                    __self: this\n                  }, \"Text:\", React.createElement(\"input\", {\n                    \"data-instancename\": \"text\",\n                    id: \"text-input-ctaText_\" + _this2.state.ctaCount,\n                    name: \"text\",\n                    placeholder: item.text,\n                    type: \"text\",\n                    defaultValue: item.text,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 43\n                    },\n                    __self: this\n                  })), React.createElement(\"label\", {\n                    key: \"key__href\" + _this2.state.ctaCount,\n                    htmlFor: \"text-input-ctaLink_\" + _this2.state.ctaCount,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 43\n                    },\n                    __self: this\n                  }, \"Link:\", React.createElement(\"input\", {\n                    \"data-instancename\": \"href\",\n                    id: \"text-input-ctaLink_\" + _this2.state.ctaCount,\n                    name: \"href\",\n                    placeholder: item.href,\n                    type: \"text\",\n                    defaultValue: item.href,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 43\n                    },\n                    __self: this\n                  })));\n                }); // convert array to object to prevent deep nesting\n\n                linkInputsObj = Object.assign.apply(Object, [{}].concat(_toConsumableArray(linkInputs)));\n                newArr.push(linkInputsObj);\n                console.dir(linkInputsObj);\n                console.log(newArr);\n                _context.next = 8;\n                return this.setState({\n                  ctaCount: this.state.ctaCount + 1,\n                  ctaContent: newArr\n                });\n\n              case 8:\n                //   for(let i= 0; i < this.state.ctaCount - 1; i++){\n                //         return newArr.push(linkInputs)\n                //     };\n                // console.log('this.state.ctaCount: '+ this.state.ctaCount);\n                //    alert('this.state.ctaCount before push '+ this.state.ctaCount);\n                // await this.setState({\n                //     ctaContent : newArr\n                //    })\n                //console.log('linkInputs before push '+ linkInputs);\n                //   for(let i= 0; i <= this.state.ctaCount - 1; i++){\n                //     newArr.push(linkInputs)\n                //  };\n                //  await this.setState({\n                //     ctaArr : newArr.length\n                //    })\n                this.props.addCtaArr(this.state.ctaCount, this.state.ctaContent); // let linkInputs = this.state.json.map((item, ctaArr) => {\n                //     return();\n                // });\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addingCta(_x) {\n        return _addingCta.apply(this, arguments);\n      }\n\n      return addingCta;\n    }()\n  }, {\n    key: \"removingCta\",\n    value: function () {\n      var _removingCta = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(e) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //console.log('removingCta before ' + this.state.ctaCount );\n                // let ctaCurrNum = this.state.ctaNum;\n                // const newArr = [this.props.jsonOption.content];\n                e.preventDefault();\n                _context2.next = 3;\n                return this.setState({\n                  //ctaNum : (ctaCurrNum === 0 ) ? ctaCurrNum : ctaCurrNum - 1,\n                  // json: newArr.pop(),\n                  ctaCount: this.state.ctaCount - 1,\n                  //(this.state.ctaCount !== 0 ) ? this.state.ctaCount - 1 : this.state.ctaCount,\n                  ctaContent: newArr.pop(),\n                  ctaArr: newArr.length\n                });\n\n              case 3:\n                //console.log('this.state.ctaContent: '+this.state.ctaContent);\n                this.props.addCtaArr(this.state.ctaCount, this.state.ctaContent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function removingCta(_x2) {\n        return _removingCta.apply(this, arguments);\n      }\n\n      return removingCta;\n    }()\n  }, {\n    key: \"handleFormChange\",\n    value: function handleFormChange() {// console.log('change detected!');\n    }\n  }, {\n    key: \"dropdownSelected\",\n    value: function dropdownSelected(e) {\n      // console.log(this.state.isDropdown );\n      this.setState({\n        isDropdown: !this.state.isDropdown\n      });\n    } // componentDidUpdate(){\n    //     alert('rendered');\n    // } \n\n  }, {\n    key: \"render\",\n    value: function render() {\n      //console.log('this.state.ctaCount ' + this.state.ctaCount );\n      // console.log('newArr ' + newArr );\n      var pluralS = this.state.ctaCount > 1 ? \"S: \" : ':'; //onsole.log('ctaArr array length '+ this.state.ctaArr );\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"addCta\",\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"checkbox_dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"p-3\",\n        type: \"checkbox\",\n        defaultValue: this.state.isDropdown,\n        onChange: this.dropdownSelected.bind(this),\n        id: \"checkbox_dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), React.createElement(\"span\", {\n        className: \"p-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Create Dropdown\")), React.createElement(\"div\", {\n        className: \"d-flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.state.ctaCount >= 2 ? React.createElement(\"button\", {\n        type: \"button\",\n        className: \"text-uppercase m-1 btn btn-danger\",\n        onClick: this.removingCta.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"remove cta\") : React.createElement(\"button\", {\n        type: \"button\",\n        className: \"text-uppercase m-1 btn btn-danger\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"remove cta\"), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"text-uppercase m-1 btn btn-primary\",\n        onClick: this.addingCta.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, \"add cta\"), React.createElement(\"div\", {\n        className: \"ctas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Number of \".concat(this.state.ctaCount - 1, \" CTA\").concat(pluralS))), React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"inputElems\",\n        onChange: this.handleFormChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, this.state.ctaContent))));\n    }\n  }]);\n\n  return OptionCTA;\n}(Component);\n\n;\nexport default OptionCTA;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/content/OptionCTA.js"],"names":["React","Component","Fragment","newArr","OptionCTA","props","state","json","jsonOption","content","ctaNum","ctaContent","isDropdown","ctaArr","length","lengthCtaArr","ctaCount","e","preventDefault","linkInputs","map","item","index","text","href","linkInputsObj","Object","assign","push","console","dir","log","setState","addCtaArr","pop","pluralS","visibility","dropdownSelected","bind","removingCta","addingCta","handleFormChange"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,IAAMC,MAAM,GAAG,EAAf;;IAEMC,S;;;;;AAEF,qBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,mFAAMA,KAAN;AACA,UAAKC,KAAL,GAAW;AACPC,MAAAA,IAAI,EAAE,MAAKF,KAAL,CAAWG,UAAX,CAAsBC,OADrB;AAEPC,MAAAA,MAAM,EAAG,CAFF;AAGPC,MAAAA,UAAU,EAAER,MAHL;AAIPS,MAAAA,UAAU,EAAE,KAJL;AAKPC,MAAAA,MAAM,EAAGV,MAAM,CAACW,MALT;AAMPC,MAAAA,YAAY,EAAG,MAAKV,KAAL,CAAWG,UAAX,CAAsBC,OAAtB,CAA8BK,MANtC;AAOPE,MAAAA,QAAQ,EAAG;AAPJ,KAAX;AAFc;AAWjB,G,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;gDAKiBC,C;;;;;;;;AACb;AACAA,gBAAAA,CAAC,CAACC,cAAF;AAEUC,gBAAAA,U,GAAa,KAAKb,KAAL,CAAWC,IAAX,CAAgBa,GAAhB,CAAoB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACpD,yBACA;AAAK,oBAAA,GAAG,EAAE,cAAY,MAAI,CAAChB,KAAL,CAAWU,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA2C;AAAO,oBAAA,GAAG,EAAE,aAAW,MAAI,CAACV,KAAL,CAAWU,QAAlC;AAA4C,oBAAA,OAAO,EAAE,wBAAsB,MAAI,CAACV,KAAL,CAAWU,QAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAqG;AAAO,yCAAkB,MAAzB;AAAgC,oBAAA,EAAE,EAAE,wBAAsB,MAAI,CAACV,KAAL,CAAWU,QAArE;AAA+E,oBAAA,IAAI,EAAC,MAApF;AAA2F,oBAAA,WAAW,EAAEK,IAAI,CAACE,IAA7G;AAAmH,oBAAA,IAAI,EAAC,MAAxH;AAA+H,oBAAA,YAAY,EAAEF,IAAI,CAACE,IAAlJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAArG,CAA3C,EAAiT;AAAO,oBAAA,GAAG,EAAE,cAAY,MAAI,CAACjB,KAAL,CAAWU,QAAnC;AAA6C,oBAAA,OAAO,EAAE,wBAAsB,MAAI,CAACV,KAAL,CAAWU,QAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAsG;AAAO,yCAAkB,MAAzB;AAAgC,oBAAA,EAAE,EAAE,wBAAsB,MAAI,CAACV,KAAL,CAAWU,QAArE;AAA+E,oBAAA,IAAI,EAAC,MAApF;AAA2F,oBAAA,WAAW,EAAEK,IAAI,CAACG,IAA7G;AAAmH,oBAAA,IAAI,EAAC,MAAxH;AAA+H,oBAAA,YAAY,EAAEH,IAAI,CAACG,IAAlJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAtG,CAAjT,CADA;AAED,iBAHgB,C,EAIlB;;AACOC,gBAAAA,a,GAAgBC,MAAM,CAACC,MAAP,OAAAD,MAAM,GAAQ,EAAR,4BAAeP,UAAf,G;AAC5BhB,gBAAAA,MAAM,CAACyB,IAAP,CAAYH,aAAZ;AAEHI,gBAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AACAI,gBAAAA,OAAO,CAACE,GAAR,CAAY5B,MAAZ;;uBACM,KAAK6B,QAAL,CAAc;AACnBhB,kBAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWU,QAAX,GAAsB,CADb;AAEnBL,kBAAAA,UAAU,EAAER;AAFO,iBAAd,C;;;AAKT;AACA;AACA;AAED;AAEC;AACI;AACA;AACA;AAGF;AAEF;AACA;AACA;AAEA;AACA;AACA;AAGD,qBAAKE,KAAL,CAAW4B,SAAX,CAAqB,KAAK3B,KAAL,CAAWU,QAAhC,EAA0C,KAAKV,KAAL,CAAWK,UAArD,E,CAMC;AACA;AACA;;;;;;;;;;;;;;;;;;;;;iDAUaM,C;;;;;AACb;AACA;AACA;AACAA,gBAAAA,CAAC,CAACC,cAAF;;uBAIG,KAAKc,QAAL,CAAc;AACjB;AACA;AACAhB,kBAAAA,QAAQ,EAAE,KAAKV,KAAL,CAAWU,QAAX,GAAsB,CAHf;AAGkB;AACnCL,kBAAAA,UAAU,EAAER,MAAM,CAAC+B,GAAP,EAJK;AAKjBrB,kBAAAA,MAAM,EAAGV,MAAM,CAACW;AALC,iBAAd,C;;;AASJ;AACA,qBAAKT,KAAL,CAAW4B,SAAX,CAAqB,KAAK3B,KAAL,CAAWU,QAAhC,EAA0C,KAAKV,KAAL,CAAWK,UAArD;;;;;;;;;;;;;;;;;;uCAIe,CACf;AACF;;;qCAEgBM,C,EAAE;AAChB;AACC,WAAKe,QAAL,CAAc;AACVpB,QAAAA,UAAU,EAAE,CAAC,KAAKN,KAAL,CAAWM;AADd,OAAd;AAGH,K,CAGD;AACA;AAEA;;;;6BAGI;AACJ;AACD;AACH,UAAMuB,OAAO,GAAI,KAAK7B,KAAL,CAAWU,QAAX,GAAsB,CAAvB,WAAmC,GAAnD,CAHQ,CAIR;;AACI,aACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAwB,QAAA,KAAK,EAAE;AAAC,kCAAgB,KAAKX,KAAL,CAAW+B,UAA3B;AAAD,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,KAAjB;AAAuB,QAAA,IAAI,EAAC,UAA5B;AAAuC,QAAA,YAAY,EAAE,KAAK9B,KAAL,CAAWM,UAAhE;AAA4E,QAAA,QAAQ,EAAE,KAAKyB,gBAAL,CAAsBC,IAAtB,CAA2B,IAA3B,CAAtF;AAAwH,QAAA,EAAE,EAAC,mBAA3H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,CADJ,EAKI;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACM,KAAKhC,KAAL,CAAWU,QAAX,IAAuB,CAAxB,GAA4B;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mCAAhC;AAAoE,QAAA,OAAO,EAAE,KAAKuB,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA5B,GAA4J;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,mCAAhC;AAAoE,QAAA,QAAQ,MAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADjK,EAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,oCAAhC;AAAqE,QAAA,OAAO,EAAE,KAAKE,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFJ,EAGI;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACkB,KAAKhC,KAAL,CAAWU,QAAX,GAAsB,CADxC,iBACgDmB,OADhD,EAHJ,CALJ,EAYQ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,QAAQ,EAAE,KAAKM,gBAAL,CAAsBH,IAAtB,CAA2B,IAA3B,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACK,KAAKhC,KAAL,CAAWK,UADhB,CADJ,CAZR,CADJ,CADJ;AAuBH;;;;EAjKuBV,S;;AAmKvB;AAED,eAAeG,SAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\nconst newArr = [];\n\nclass OptionCTA extends Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            json: this.props.jsonOption.content,\n            ctaNum : 0,\n            ctaContent: newArr,\n            isDropdown: false,\n            ctaArr : newArr.length,\n            lengthCtaArr : this.props.jsonOption.content.length,\n            ctaCount : 1,\n        }\n    }\n    // shouldComponentUpdate(nextProps, nextState) {\n    //     console.log('nextState: '+nextState.isDropdown?true:false);\n    //     console.log('nextState: '+nextProps.isDropdown?true:false);\n    // }\n    // componentWillReceiveProps(nextProps) {\n    //    // console.log('nextProps: '+nextProps.newArr);\n    //    // this.setState({ctaContent: nextProps.newArr});\n    // }\n    // componentWillRecieveProps(newProps) \n    // { \n    //     if (this.props !== newProps) { \n    //         console.log(\" New Props have been assigned \"); \n    //         // Use this.setState() to rerender the page. \n    //     } \n    // } \n\n\n\n\n     async addingCta(e){\n        // adding a duplicate of the array from this.props.jsonOption.content\n        e.preventDefault();\n       \n            const linkInputs = this.state.json.map((item, index) => {\n                return (\n                <div key={'added_Cta'+this.state.ctaCount}><label key={\"key_Text\"+this.state.ctaCount} htmlFor={\"text-input-ctaText_\"+this.state.ctaCount}>Text:<input data-instancename=\"text\" id={\"text-input-ctaText_\"+this.state.ctaCount} name=\"text\" placeholder={item.text} type=\"text\" defaultValue={item.text}/></label><label key={\"key__href\"+this.state.ctaCount} htmlFor={\"text-input-ctaLink_\"+this.state.ctaCount}>Link:<input data-instancename=\"href\" id={\"text-input-ctaLink_\"+this.state.ctaCount} name=\"href\" placeholder={item.href} type=\"text\" defaultValue={item.href} /></label></div>);\n              });\n             // convert array to object to prevent deep nesting\n              const linkInputsObj = Object.assign({}, ...linkInputs);\n              newArr.push(linkInputsObj);\n         \n           console.dir(linkInputsObj);\n           console.log(newArr);\n           await this.setState({\n            ctaCount: this.state.ctaCount + 1,\n            ctaContent: newArr\n           })\n\n        //   for(let i= 0; i < this.state.ctaCount - 1; i++){\n        //         return newArr.push(linkInputs)\n        //     };\n\n       // console.log('this.state.ctaCount: '+ this.state.ctaCount);\n         \n        //    alert('this.state.ctaCount before push '+ this.state.ctaCount);\n            // await this.setState({\n            //     ctaContent : newArr\n            //    })\n           \n  \n          //console.log('linkInputs before push '+ linkInputs);\n        \n        //   for(let i= 0; i <= this.state.ctaCount - 1; i++){\n        //     newArr.push(linkInputs)\n        //  };\n        \n        //  await this.setState({\n        //     ctaArr : newArr.length\n        //    })\n   \n\n       this.props.addCtaArr(this.state.ctaCount, this.state.ctaContent);\n\n\n\n\n\n        // let linkInputs = this.state.json.map((item, ctaArr) => {\n        //     return();\n        // });\n\n\n\n    }\n\n\n\n\n\n   async removingCta(e){\n        //console.log('removingCta before ' + this.state.ctaCount );\n        // let ctaCurrNum = this.state.ctaNum;\n        // const newArr = [this.props.jsonOption.content];\n        e.preventDefault();\n\n   \n\n     await this.setState({\n        //ctaNum : (ctaCurrNum === 0 ) ? ctaCurrNum : ctaCurrNum - 1,\n        // json: newArr.pop(),\n        ctaCount: this.state.ctaCount - 1, //(this.state.ctaCount !== 0 ) ? this.state.ctaCount - 1 : this.state.ctaCount,\n        ctaContent: newArr.pop(),\n        ctaArr : newArr.length\n       })\n\n\n       //console.log('this.state.ctaContent: '+this.state.ctaContent);\n       this.props.addCtaArr(this.state.ctaCount, this.state.ctaContent);\n    }\n\n\n    handleFormChange(){\n       // console.log('change detected!');\n    }\n\n    dropdownSelected(e){\n       // console.log(this.state.isDropdown );\n        this.setState({\n            isDropdown: !this.state.isDropdown \n        })\n    }\n\n\n    // componentDidUpdate(){\n    //     alert('rendered');\n \n    // } \n\n\nrender(){\n    //console.log('this.state.ctaCount ' + this.state.ctaCount );\n   // console.log('newArr ' + newArr );\nconst pluralS = (this.state.ctaCount > 1) ? `S: `: ':';\n//onsole.log('ctaArr array length '+ this.state.ctaArr );\n    return(\n        <Fragment> \n            <div className=\"addCta\" style={{\"visibility\":`${this.props.visibility}`}}>\n                <label htmlFor=\"checkbox_dropdown\">\n                    <input className=\"p-3\" type=\"checkbox\" defaultValue={this.state.isDropdown} onChange={this.dropdownSelected.bind(this)} id=\"checkbox_dropdown\"/>\n                    <span className=\"p-1\">Create Dropdown</span>\n                </label>\n                <div className=\"d-flex\">\n                    {(this.state.ctaCount >= 2)? <button type=\"button\" className=\"text-uppercase m-1 btn btn-danger\" onClick={this.removingCta.bind(this)}>remove cta</button> : <button type=\"button\" className=\"text-uppercase m-1 btn btn-danger\" disabled>remove cta</button>}\n                    <button type=\"button\" className=\"text-uppercase m-1 btn btn-primary\" onClick={this.addingCta.bind(this)}>add cta</button>\n                    <div className=\"ctas\">\n                        {`Number of ${this.state.ctaCount - 1} CTA${pluralS}`}\n                    </div>\n                </div>\n                    <Fragment>\n                        <div className=\"inputElems\" onChange={this.handleFormChange.bind(this)}>\n                            {this.state.ctaContent}\n                        </div>\n                    </Fragment>\n                </div>\n           \n        </Fragment>\n    );\n};\n\n};\n\nexport default OptionCTA;"]},"metadata":{},"sourceType":"module"}