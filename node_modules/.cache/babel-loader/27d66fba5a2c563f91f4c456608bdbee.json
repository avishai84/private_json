{"ast":null,"code":"import _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/content/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport brand from '../../marketing_json/brands';\nimport jsonData from '../../marketing_json/svgOverlay.json';\nimport ImgPreview from '../imgpreview';\nimport ListItem from '../listitem';\nimport PlainJson from '../plainjson';\nvar json = JSON.parse(JSON.stringify(jsonData));\n\nvar Content =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Content, _Component);\n\n  function Content(props) {\n    var _this;\n\n    _classCallCheck(this, Content);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Content).call(this, props));\n\n    _this.elemUpdatedInForm = function (e) {\n      _this.setState({\n        changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n        markup: e.target.value,\n        customName: e.target.dataset.instancename\n      }, function () {\n        _this.makeChangesJson();\n      }); // write changes to json\n      // https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n\n    };\n\n    _this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility: 'hidden'\n    };\n    _this.parseJson = _this.parseJson.bind(_assertThisInitialized(_this));\n    _this.toUpdate = _this.toUpdate.bind(_assertThisInitialized(_this));\n    _this.createMarkup = _this.createMarkup.bind(_assertThisInitialized(_this));\n    _this.elemUpdatedInForm = _this.elemUpdatedInForm.bind(_assertThisInitialized(_this));\n    _this.focusElem = _this.focusElem.bind(_assertThisInitialized(_this));\n    return _this;\n  } // Create HTML template from json\n\n\n  _createClass(Content, [{\n    key: \"parseJson\",\n    value: function parseJson() {\n      var origJson = json;\n      var jsonNew = this.state.jsonValue;\n      var ctaLinksArray = origJson.data.links.content;\n      var linkInputs = ctaLinksArray.map(function (item, index) {\n        return React.createElement(\"div\", {\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"`\", React.createElement(\"label\", {\n          key: \"key_Text\" + index,\n          htmlFor: \"text-input-ctaText_\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"Text:\", React.createElement(\"input\", {\n          \"data-instancename\": \"text\",\n          id: \"text-input-ctaText_\" + index,\n          name: \"text\",\n          placeholder: item.text,\n          type: \"text\",\n          defaultValue: item.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        })), React.createElement(\"label\", {\n          key: \"key__href\" + index,\n          htmlFor: \"text-input-ctaLink_\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \"Link:\", React.createElement(\"input\", {\n          \"data-instancename\": \"href\",\n          id: \"text-input-ctaLink_\" + index,\n          name: \"href\",\n          placeholder: item.href,\n          type: \"text\",\n          defaultValue: item.href,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        })), \"`\");\n      });\n      var instanceHtml = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: origJson.instanceDesc.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, \"Instance Description:\", React.createElement(\"input\", {\n        \"data-instancename\": \"instanceDesc\",\n        id: origJson.instanceDesc.replace(/\\s/g, ''),\n        type: \"text\",\n        placeholder: origJson.instanceDesc,\n        defaultValue: origJson.instanceDesc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"Background Properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, \"Background Alt Text:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"background\",\n        id: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.altText,\n        placeholder: origJson.data.background.content.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Background Desktop Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"background\",\n        id: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.largeImg,\n        placeholder: origJson.data.background.content.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, \"Background Mobile Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"background\",\n        id: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.smallImg,\n        placeholder: origJson.data.background.content.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"SVG Overlay Properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, \"Svg Overlay Alt Text:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.altText,\n        placeholder: origJson.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Svg Overlay Desktop Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.largeImg,\n        placeholder: origJson.data.svgoverlay.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, \"Svg Overlay Mobile Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.smallImg,\n        placeholder: origJson.data.svgoverlay.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"CTA links\"), linkInputs, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Advanced Option\"), React.createElement(\"label\", {\n        htmlFor: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Experiment Running:\", React.createElement(\"select\", {\n        \"data-instancename\": \"experimentRunning\",\n        id: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        defaultValue: this.state.jsonValue.experimentRunning.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, this.state.jsonValue.experimentRunning.toString()), React.createElement(\"option\", {\n        defaultValue: this.state.jsonValue.experimentRunning !== true ? 'true' : 'false',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, this.state.jsonValue.experimentRunning !== true ? 'true' : 'false'))));\n      this.setState({\n        visibility: 'visible'\n      });\n      this.toUpdate(instanceHtml);\n    } // Update the new HTML state\n\n  }, {\n    key: \"toUpdate\",\n    value: function toUpdate(instanceHtml) {\n      this.setState({\n        elem: instanceHtml\n      });\n      this.createMarkup();\n    } // Convert string to HTML and set in DOM\n\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup() {\n      return {\n        __html: this.state.elem\n      };\n    } // Detect change on the form\n\n  }, {\n    key: \"makeChangesJson\",\n    value: function makeChangesJson() {\n      var _this2 = this;\n\n      // changing json new value\n      var currentChange = this.state.jsonValue[this.state.customName]; //console.log(this.state.customName);\n\n      if (this.state.customName === 'experimentRunning') {\n        currentChange = currentChange ? this.state.jsonValue[this.state.customName] = false : this.state.jsonValue[this.state.customName] = true; // console.log(`2: ${currentChange}`);\n      }\n\n      if (this.state.customName === 'instanceDesc') {\n        this.state.jsonValue[this.state.customName] = this.state.markup; //console.log(`3: ${currentChange}`);\n      }\n\n      if (this.state.targetName === 'background') {\n        this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup;\n      } // svgoverlay Image, SVG, Alt\n\n\n      if (this.state.targetName === 'svgoverlay') {\n        this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup;\n      } // links - CTA\n\n\n      if (this.state.customName === 'href') {\n        this.state.jsonValue.data.links.content.map(function (element, index) {\n          return element[_this2.state.customName] = _this2.state.markup;\n        });\n      }\n\n      if (this.state.customName === 'text') {\n        //console.log(this.state.customName);\n        this.state.jsonValue.data.links.content.map(function (element, index) {\n          return element[_this2.state.customName] = _this2.state.markup;\n        });\n      }\n\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n      this.parseJson();\n    }\n  }, {\n    key: \"focusElem\",\n    value: function focusElem(e) {\n      // this fn helps identify which input elem we are changing\n      this.setState({\n        targetName: e.target.name\n      });\n      console.log('BLUR ' + this.state.targetName);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DataGeneral\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"select-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Select Brand\"))), React.createElement(\"span\", {\n        className: \"select-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onChange: this.parseJson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Select Template\"), React.createElement(\"option\", {\n        value: this.state.jsonValue.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, this.state.jsonValue.name))), React.createElement(\"div\", {\n        className: \"SelectForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"leftDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onChange: this.elemUpdatedInForm,\n        onKeyUp: this.focusElem,\n        onBlur: this.focusElem,\n        onClick: this.focusElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, this.state.elem))), React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"rightDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(ImgPreview, {\n        imgData: this.state.jsonValue,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(PlainJson, {\n        json: this.state.jsonDataRaw,\n        detect: this.state.changedDetected,\n        markup: this.state.markup,\n        jsonValue: this.state.jsonValue,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202\n        },\n        __self: this\n      }, \"Last Change\"), React.createElement(ListItem, {\n        name: this.state.changedDetected,\n        list: this.state.markup,\n        customName: this.state.customName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Content;\n}(Component);\n\nexport default Content;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/content/index.js"],"names":["React","Component","Fragment","brand","jsonData","ImgPreview","ListItem","PlainJson","json","JSON","parse","stringify","Content","props","elemUpdatedInForm","e","setState","changedDetected","target","nodeName","toLowerCase","markup","value","customName","dataset","instancename","makeChangesJson","state","jsonValue","elem","jsonDataRaw","targetName","visibility","parseJson","bind","toUpdate","createMarkup","focusElem","origJson","jsonNew","ctaLinksArray","data","links","content","linkInputs","map","item","index","text","href","instanceHtml","instanceDesc","replace","background","altText","largeImg","smallImg","svgoverlay","experimentRunning","toString","__html","currentChange","element","name","console","log"],"mappings":"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","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport brand from '../../marketing_json/brands';\nimport jsonData from '../../marketing_json/svgOverlay.json';\nimport ImgPreview from '../imgpreview'\nimport ListItem from '../listitem';\nimport PlainJson from '../plainjson';\nlet json = JSON.parse(JSON.stringify(jsonData));\n\nclass Content extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility:'hidden'\n    }\n    this.parseJson = this.parseJson.bind(this);\n    this.toUpdate = this.toUpdate.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n    this.elemUpdatedInForm = this.elemUpdatedInForm.bind(this);\n    this.focusElem = this.focusElem.bind(this);\n  }\n  // Create HTML template from json\n  parseJson() {\n    const origJson = json;\n    let jsonNew = this.state.jsonValue;\n    let ctaLinksArray = origJson.data.links.content;\n    let linkInputs = ctaLinksArray.map((item, index) => {\n      return (\n      <div key={index}>`<label key={\"key_Text\"+index} htmlFor={\"text-input-ctaText_\"+index}>Text:<input data-instancename=\"text\" id={\"text-input-ctaText_\"+index} name=\"text\" placeholder={item.text} type=\"text\" defaultValue={item.text}/></label><label key={\"key__href\"+index} htmlFor={\"text-input-ctaLink_\"+index}>Link:<input data-instancename=\"href\" id={\"text-input-ctaLink_\"+index} name=\"href\" placeholder={item.href} type=\"text\" defaultValue={item.href} /></label>`</div>);\n    });\n\n\n    let instanceHtml =\n      <div>\n        <label htmlFor={origJson.instanceDesc.replace(/\\s/g, '')}>Instance Description:\n          <input data-instancename='instanceDesc' id={origJson.instanceDesc.replace(/\\s/g, '')} type=\"text\" placeholder={origJson.instanceDesc} defaultValue={origJson.instanceDesc}/>\n        </label>\n        <br/>\n        <h5>Background Properties</h5>\n        <label htmlFor={origJson.data.background.content.altText.replace(/\\s/g, '')}>Background Alt Text:\n        <input data-instancename='altText' name=\"background\" id={origJson.data.background.content.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.altText} placeholder={origJson.data.background.content.altText} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.background.content.largeImg.replace(/\\s/g, '')}>Background Desktop Image:\n          <input data-instancename='largeImg' name=\"background\" id={origJson.data.background.content.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.largeImg} placeholder={origJson.data.background.content.largeImg} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.background.content.smallImg.replace(/\\s/g, '')}>Background Mobile Image:\n        <input data-instancename='smallImg' name=\"background\" id={origJson.data.background.content.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.smallImg} placeholder={origJson.data.background.content.smallImg} />\n        </label>\n        <br/>\n        <h5>SVG Overlay Properties</h5>\n        <label htmlFor={origJson.data.svgoverlay.altText.replace(/\\s/g, '')}>Svg Overlay Alt Text:\n           <input data-instancename='altText' name=\"svgoverlay\" id={origJson.data.svgoverlay.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.altText} placeholder={origJson.data.svgoverlay.altText} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')}>Svg Overlay Desktop Image:\n          <input data-instancename='largeImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.largeImg} placeholder={origJson.data.svgoverlay.largeImg} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')}>Svg Overlay Mobile Image:\n          <input data-instancename='smallImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.smallImg} placeholder={origJson.data.svgoverlay.smallImg} />\n        </label>\n        <br/>\n        <h5>CTA links</h5>\n        {linkInputs}\n        <br/>\n        <h5>Advanced Option</h5>\n        <label htmlFor=\"__experimentRunning\">Experiment Running:\n        <select data-instancename='experimentRunning' id=\"__experimentRunning\">\n          <option defaultValue={this.state.jsonValue.experimentRunning.toString()}>\n            {this.state.jsonValue.experimentRunning.toString()}\n          </option>\n          <option defaultValue={(this.state.jsonValue.experimentRunning !== true) ? 'true': 'false'}>\n          {(this.state.jsonValue.experimentRunning !== true) ? 'true': 'false'}\n          </option>\n        </select>\n      </label></div>;\n\n\n    this.setState({\n      visibility: 'visible'\n    })\n    this.toUpdate(instanceHtml);\n  }\n  // Update the new HTML state\n  toUpdate(instanceHtml) {\n    this.setState({\n      elem: instanceHtml\n    });\n    this.createMarkup();\n  }\n\n  // Convert string to HTML and set in DOM\n  createMarkup() {\n    return {\n      __html: this.state.elem\n    };\n  }\n\n  // Detect change on the form\n  elemUpdatedInForm = (e) => {\n    this.setState({\n      changedDetected: `${e.target.nodeName.toLowerCase()}`,\n      markup: e.target.value,\n      customName: e.target.dataset.instancename\n    }, () => { this.makeChangesJson() });\n   // write changes to json\n   // https://www.freecodecamp.org/news/get-pro-with-react-setstate-in-10-minutes-d38251d1c781/\n  }\n  makeChangesJson() {\n      // changing json new value\n      let currentChange = this.state.jsonValue[this.state.customName];\n      //console.log(this.state.customName);\n      if (this.state.customName === 'experimentRunning') {\n        currentChange = currentChange ? (this.state.jsonValue[this.state.customName] = false) : (this.state.jsonValue[this.state.customName] = true);\n        // console.log(`2: ${currentChange}`);\n      }\n      if (this.state.customName === 'instanceDesc') {\n        this.state.jsonValue[this.state.customName] = this.state.markup;\n        //console.log(`3: ${currentChange}`);\n      }\n\n      if (this.state.targetName === 'background') {\n         this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup;\n      }\n\n      // svgoverlay Image, SVG, Alt\n      if (this.state.targetName === 'svgoverlay') {\n          this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup;\n        }\n\n      // links - CTA\n      if (this.state.customName === 'href') {\n        this.state.jsonValue.data.links.content.map((element, index) => {\n          return element[this.state.customName]= this.state.markup;\n        });\n      }\n      if (this.state.customName === 'text') {\n        //console.log(this.state.customName);\n        this.state.jsonValue.data.links.content.map((element, index) => {\n         return element[this.state.customName]= this.state.markup;\n        });\n\n      }\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n      this.parseJson();\n  }\n\n  focusElem(e) {\n    // this fn helps identify which input elem we are changing\n    this.setState({\n      targetName: e.target.name\n    })\n    console.log('BLUR '+ this.state.targetName);\n  }\n  render() {\n\n    return(\n      <Fragment>\n        <div className=\"DataGeneral\">\n        <span className=\"select-dropdown\">\n              <select>\n                <option>Select Brand</option>\n           \n              </select>\n          </span>\n          <span className=\"select-dropdown\">\n              <select onChange={this.parseJson}><option>Select Template</option>\n                <option value={this.state.jsonValue.name}>{this.state.jsonValue.name}</option>\n              </select>\n          </span>\n          <div className=\"SelectForm\">\n            <Fragment>\n              <div className=\"leftDiv\">\n              <form\n               onChange={this.elemUpdatedInForm}\n               onKeyUp={this.focusElem}\n               onBlur={this.focusElem}\n               onClick={this.focusElem}>\n                {this.state.elem}\n               </form>\n              </div>\n            </Fragment>\n           <Fragment >\n            <div className=\"rightDiv\">\n              <ImgPreview imgData={this.state.jsonValue} visibility={this.state.visibility}/>\n              <PlainJson json={this.state.jsonDataRaw} detect={this.state.changedDetected} markup={this.state.markup} jsonValue={this.state.jsonValue} visibility={this.state.visibility}/>\n            </div>\n           </Fragment> \n          </div>\n        </div>\n        <div>\n          <h6>Last Change</h6>\n          <ListItem name={this.state.changedDetected} list={this.state.markup} customName={this.state.customName} />\n        </div>\n      </Fragment>\n    );\n\n  }\n}\n\nexport default Content;\n"]},"metadata":{},"sourceType":"module"}