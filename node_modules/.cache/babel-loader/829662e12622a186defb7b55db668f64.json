{"ast":null,"code":"import _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/components/imgpreview/index.js\";\nimport React, { Component, Fragment } from 'react';\nimport DraggableComp from '../draggable_cta';\nimport MobileToggle from './MobileToggle';\n\nvar ImgPreview =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ImgPreview, _Component);\n\n  function ImgPreview(props) {\n    var _this;\n\n    _classCallCheck(this, ImgPreview);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ImgPreview).call(this, props));\n\n    _this.positionsFromDraggable = function (x, y) {\n      _this.setState({\n        positionX: x,\n        positionY: y,\n        imgNaturallSize: _this.props.imgData.data.background.content.largeImg,\n        brandUpdate: _this.props.brandName\n      }); // natural width/height values of image to help calc. CTA '%' position\n\n\n      _this.props.parentPositioningCallback(_this.state.positionX, _this.state.positionY);\n    };\n\n    _this.state = {\n      imgData: _this.props.imgData,\n      linksText: _this.prop,\n      elemChange: _this.props.elemChange,\n      jsonValue: _this.props.jsonValue,\n      isChecked: _this.props,\n      brandUpdate: '',\n      imgUrl: '',\n      positionX: '',\n      positionY: '',\n      imgNaturalWidth: 0,\n      imgNaturalHeight: 0\n    };\n    return _this;\n  }\n\n  _createClass(ImgPreview, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        imgUrl: nextProps.brandName\n      });\n    } // Welcome to Prop drilling....\n    // We need to get the position X, Y data to update the JSON.\n    // The data is coming from Draggable comp. three levels deep\n    // Future update to use Contex API\n\n  }, {\n    key: \"imageLoaded\",\n    value: function imageLoaded() {\n      // Set natural width / Height once image is loaded for desktop\n      this.setState({\n        imgNaturalWidth: this._image.naturalWidth,\n        imgNaturalHeight: this._image.naturalHeight\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(window);\n      console.dir(window);\n\n      window.onerror = function (message, source, error) {\n        console.dir(message, source, error);\n      };\n\n      var smallSvg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.svgoverlay.smallImg);\n      var largeSvg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.svgoverlay.largeImg);\n      var smallImg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.background.content.smallImg);\n      var largeImg = \"\".concat(this.state.imgUrl).concat(this.state.imgData.data.background.content.largeImg); // set context for ref. DOM elem.\n      // For more info, see video: https://www.youtube.com/watch?v=VyMziBh4SYM\n\n      var self = this;\n      var linksText = this.state.imgData.data.links.content; // console.dir(this.state.imgData.data);\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility),\n          \"display\": \"\".concat(this.props.display)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(MobileToggle, {\n        imgData: this.state.imgData.data,\n        imgUrl: this.state.imgUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"imgPreview\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"mkt-image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width:767px)\",\n        srcSet: smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        alt: this.state.imgData.data.background.content.altText,\n        src: largeImg //  Getting a reference to the image as DOM elem to calc. width/height for boundaries of draggable CTA\n        ,\n        ref: function ref(el) {\n          self._image = el;\n        },\n        onLoad: this.imageLoaded.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"absolute leftTop\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(DraggableComp, {\n        desktopStyles: this.state.imgData.data.links.style.desktop,\n        parentPositioningFromDraggbleCallback: this.positionsFromDraggable.bind(this),\n        imgNaturalWidth: this.state.imgNaturalWidth,\n        imgNaturalHeight: this.state.imgNaturalHeight,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, linksText.map(function (item, index) {\n        return React.createElement(\"span\", {\n          className: \"cta_children ml-2 pt-0 pb-1\",\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, item.text);\n      }))), React.createElement(\"picture\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"source\", {\n        media: \"(max-width: 767px)\",\n        srcSet: smallSvg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"img\", {\n        src: largeSvg,\n        alt: this.state.imgData.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ImgPreview;\n}(Component);\n\nexport default ImgPreview;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/components/imgpreview/index.js"],"names":["React","Component","Fragment","DraggableComp","MobileToggle","ImgPreview","props","positionsFromDraggable","x","y","setState","positionX","positionY","imgNaturallSize","imgData","data","background","content","largeImg","brandUpdate","brandName","parentPositioningCallback","state","linksText","prop","elemChange","jsonValue","isChecked","imgUrl","imgNaturalWidth","imgNaturalHeight","nextProps","_image","naturalWidth","naturalHeight","console","log","window","dir","onerror","message","source","error","smallSvg","svgoverlay","smallImg","largeSvg","self","links","visibility","display","altText","el","imageLoaded","bind","style","desktop","map","item","index","text"],"mappings":"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","sourcesContent":["import React, { Component, Fragment} from 'react';\nimport DraggableComp from '../draggable_cta';\nimport MobileToggle from './MobileToggle';\n\nclass ImgPreview extends Component {\n\n    constructor(props){\n      super(props);\n      this.state={\n        imgData: this.props.imgData,\n        linksText: this.prop,\n        elemChange:this.props.elemChange,\n        jsonValue : this.props.jsonValue,\n        isChecked : this.props,\n        brandUpdate: '',\n        imgUrl: '',\n        positionX: '',\n        positionY: '',\n        imgNaturalWidth:0,\n        imgNaturalHeight:0\n      };\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n      this.setState({imgUrl:nextProps.brandName});\n  }\n\n  // Welcome to Prop drilling....\n  // We need to get the position X, Y data to update the JSON.\n  // The data is coming from Draggable comp. three levels deep\n  // Future update to use Contex API\n\n  positionsFromDraggable = (x,y) => {\n        this.setState({\n          positionX:x,\n          positionY:y,\n          imgNaturallSize: this.props.imgData.data.background.content.largeImg,\n          brandUpdate: this.props.brandName\n        })\n      // natural width/height values of image to help calc. CTA '%' position\n    this.props.parentPositioningCallback(this.state.positionX,this.state.positionY);\n\n    }\n    imageLoaded(){\n      // Set natural width / Height once image is loaded for desktop\n      this.setState({\n        imgNaturalWidth:this._image.naturalWidth,\n        imgNaturalHeight: this._image.naturalHeight\n      })\n    }\n\n    render() {\nconsole.log(window);\nconsole.dir(window);\nwindow.onerror = (message, source, error) => {\n  console.dir(message, source, error);\n}; \n      const smallSvg = `${this.state.imgUrl}${this.state.imgData.data.svgoverlay.smallImg}`;\n      const largeSvg = `${this.state.imgUrl}${this.state.imgData.data.svgoverlay.largeImg}`;\n      const smallImg = `${this.state.imgUrl}${this.state.imgData.data.background.content.smallImg}`;\n      const largeImg = `${this.state.imgUrl}${this.state.imgData.data.background.content.largeImg}`;\n  \n      // set context for ref. DOM elem.\n      // For more info, see video: https://www.youtube.com/watch?v=VyMziBh4SYM\n\n      let self = this;\n      const linksText = this.state.imgData.data.links.content;\n        // console.dir(this.state.imgData.data);\n\n      return (\n        <Fragment>\n          <div style={{\"visibility\":`${this.props.visibility}`,\"display\":`${this.props.display}`}}>\n            <MobileToggle imgData={this.state.imgData.data} imgUrl={this.state.imgUrl}/>\n            <div className=\"imgPreview\" >\n              <div className=\"mkt-image\">\n                <picture>\n                  <source media=\"(max-width:767px)\" srcSet={smallImg} />\n                    <img alt={this.state.imgData.data.background.content.altText} src={largeImg}\n                      //  Getting a reference to the image as DOM elem to calc. width/height for boundaries of draggable CTA\n                       ref={\n                          function(el){\n                            self._image = el;\n                          }\n                        }\n                      onLoad={this.imageLoaded.bind(this)}\n                    />\n                  </picture>\n                </div>\n                <div className=\"absolute leftTop\">\n                <DraggableComp\n                 desktopStyles={this.state.imgData.data.links.style.desktop}\n                 parentPositioningFromDraggbleCallback={this.positionsFromDraggable.bind(this)}\n                 imgNaturalWidth={this.state.imgNaturalWidth}\n                 imgNaturalHeight={this.state.imgNaturalHeight}>\n                    <div>\n                      {/* \n                        1. get the name of text link from here: this.state.imgData.data.links.content\n                        2. create array and output\n                        \n                      */}\n                        {linksText.map((item, index) => {\n                          return(<span className=\"cta_children ml-2 pt-0 pb-1\" key={index}>{item.text}</span>);\n                        })}\n                    </div>\n\n                  </DraggableComp>\n                  <picture>\n                    <source media=\"(max-width: 767px)\" srcSet={smallSvg}/>\n                    <img src={largeSvg} alt={this.state.imgData.data.svgoverlay.altText}/>\n                  </picture>\n                </div>\n              </div>\n            </div>\n          </Fragment>\n\n        );\n      }\n  }\n\n  export default ImgPreview;\n"]},"metadata":{},"sourceType":"module"}