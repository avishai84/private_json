{"ast":null,"code":"import _assertThisInitialized from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ataashu/developer/sew/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ataashu/developer/sew/src/DataGeneral.js\";\nimport React, { Component, Fragment } from 'react';\nimport jsonData from './marketing_json/svgOverlay.json';\nimport './DataGeneral.scss';\nimport ImgPreview from './ImgPreview';\nvar json = JSON.parse(JSON.stringify(jsonData));\n\nvar ListItem =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ListItem, _Component);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ListItem).apply(this, arguments));\n  }\n\n  _createClass(ListItem, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        style: {\n          \"fontSize\": \"12px\",\n          \"color\": \"orange\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, this.props.customName, \" \", this.props.name), \"\\xA0\", React.createElement(\"small\", {\n        style: {\n          \"fontSize\": \"12px\",\n          \"color\": \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, this.props.list));\n    }\n  }]);\n\n  return ListItem;\n}(Component);\n\nvar PlainJson =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(PlainJson, _Component2);\n\n  function PlainJson(props) {\n    var _this;\n\n    _classCallCheck(this, PlainJson);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PlainJson).call(this, props));\n    _this.state = {\n      json: _this.props,\n      changedDetected: _this.props,\n      markup: _this.props,\n      jsonValue: _this.props,\n      jsonStringify: JSON.stringify(_this.jsonValue, null, 2),\n      clicked: '',\n      customName: _this.props\n    };\n    return _this;\n  }\n\n  _createClass(PlainJson, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"rightDiv\",\n        style: {\n          \"visibility\": \"\".concat(this.props.visibility)\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"textarea-a--json\",\n        className: \"sds_field sds-js_input-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"textarea\", {\n        disabled: \"disabled\",\n        id: \"textarea-a--json\",\n        value: JSON.stringify(this.state.jsonValue.json, null, 2),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return PlainJson;\n}(Component);\n\n;\n\nvar DataGeneral =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(DataGeneral, _Component3);\n\n  function DataGeneral(props) {\n    var _this2;\n\n    _classCallCheck(this, DataGeneral);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(DataGeneral).call(this, props));\n    _this2.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility: 'hidden'\n    };\n    _this2.parseJson = _this2.parseJson.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.toUpdate = _this2.toUpdate.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.createMarkup = _this2.createMarkup.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.elemUpdatedInForm = _this2.elemUpdatedInForm.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    _this2.focusElem = _this2.focusElem.bind(_assertThisInitialized(_assertThisInitialized(_this2)));\n    return _this2;\n  } // Create HTML template from json\n\n\n  _createClass(DataGeneral, [{\n    key: \"parseJson\",\n    value: function parseJson() {\n      var origJson = json;\n      var jsonNew = this.state.jsonValue;\n      var ctaLinksArray = origJson.data.links.content;\n      var linkInputs = ctaLinksArray.map(function (item, index) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"`\", React.createElement(\"label\", {\n          key: \"key_\" + index,\n          htmlFor: \"text-input-ctaText_\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"Text:\", React.createElement(\"input\", {\n          \"data-instancename\": \"text\",\n          id: \"text-input-ctaText_\" + index,\n          name: \"text\",\n          placeholder: item.text,\n          type: \"text\",\n          value: item.text,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })), React.createElement(\"label\", {\n          key: \"key__\" + index,\n          htmlFor: \"text-input-ctaLink_\" + index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, \"Link:\", React.createElement(\"input\", {\n          \"data-instancename\": \"href\",\n          id: \"text-input-ctaLink_\" + index,\n          name: \"href\",\n          placeholder: item.href,\n          type: \"text\",\n          value: item.href,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        })), \"`\");\n      });\n      var instanceHtml = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: origJson.instanceDesc.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Instance Description:\", React.createElement(\"input\", {\n        \"data-instancename\": \"instanceDesc\",\n        id: origJson.instanceDesc.replace(/\\s/g, ''),\n        type: \"text\",\n        placeholder: origJson.instanceDesc,\n        defaultValue: origJson.instanceDesc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Background Properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Background Alt Text:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"background\",\n        id: origJson.data.background.content.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.altText,\n        placeholder: origJson.data.background.content.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Background Desktop Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"background\",\n        id: origJson.data.background.content.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.largeImg,\n        placeholder: origJson.data.background.content.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"Background Mobile Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"background\",\n        id: origJson.data.background.content.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.background.content.smallImg,\n        placeholder: origJson.data.background.content.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"SVG Overlay Properties\"), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Svg Overlay Alt Text:\", React.createElement(\"input\", {\n        \"data-instancename\": \"altText\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.altText.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.altText,\n        placeholder: origJson.data.svgoverlay.altText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Svg Overlay Desktop Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"largeImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.largeImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.largeImg,\n        placeholder: origJson.data.svgoverlay.largeImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }), React.createElement(\"label\", {\n        htmlFor: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"Svg Overlay Mobile Image:\", React.createElement(\"input\", {\n        \"data-instancename\": \"smallImg\",\n        name: \"svgoverlay\",\n        id: origJson.data.svgoverlay.smallImg.replace(/\\s/g, ''),\n        type: \"text\",\n        defaultValue: origJson.data.svgoverlay.smallImg,\n        placeholder: origJson.data.svgoverlay.smallImg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"CTA links\"), linkInputs, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"h5\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Advanced Option\"), React.createElement(\"label\", {\n        htmlFor: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, \"Experiment Running:\", React.createElement(\"select\", {\n        \"data-instancename\": \"experimentRunning\",\n        id: \"__experimentRunning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        defaultValue: jsonNew.experimentRunning.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, jsonNew.experimentRunning.toString()), React.createElement(\"option\", {\n        value: jsonNew.experimentRunning.toString() === true ? false : true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, !this.state.jsonValue.experimentRunning.toString()))));\n      this.setState({\n        visibility: 'visible'\n      });\n      this.toUpdate(instanceHtml);\n    } // Update the new HTML state\n\n  }, {\n    key: \"toUpdate\",\n    value: function toUpdate(instanceHtml) {\n      this.setState({\n        elem: instanceHtml\n      });\n      this.createMarkup();\n    } // Convert string to HTML and set in DOM\n\n  }, {\n    key: \"createMarkup\",\n    value: function createMarkup() {\n      return {\n        __html: this.state.elem\n      };\n    } // Detect change on the form\n\n  }, {\n    key: \"elemUpdatedInForm\",\n    value: function elemUpdatedInForm(e) {\n      //  console.dir(e.target);\n      this.setState({\n        changedDetected: \"\".concat(e.target.nodeName.toLowerCase()),\n        markup: e.target.value,\n        customName: e.target.dataset.instancename\n      }); // write changes to json\n\n      this.makeChangesJson();\n    }\n  }, {\n    key: \"makeChangesJson\",\n    value: function makeChangesJson() {\n      var _this3 = this;\n\n      var deepChange = this.state.jsonValue; // changing json new value\n\n      var currentChange = this.state.jsonValue[this.state.customName]; //console.log(this.state.customName);\n\n      if (this.state.customName === 'experimentRunning') {\n        currentChange = currentChange ? this.state.jsonValue[this.state.customName] = false : this.state.jsonValue[this.state.customName] = true; // console.log(`2: ${currentChange}`);\n      }\n\n      if (this.state.customName === 'instanceDesc') {\n        this.state.jsonValue[this.state.customName] = this.state.markup; //console.log(`3: ${currentChange}`);\n      } // Background Image, Alt\n\n\n      if (this.state.targetName === 'background') {\n        if (this.state.jsonValue.data.background.content[this.state.customName]) {\n          this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup;\n        }\n      } // svgoverlay Image, SVG, Alt\n\n\n      if (this.state.targetName === 'svgoverlay') {\n        if (deepChange.data.svgoverlay[this.state.customName]) {\n          this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup;\n        }\n      } // links - CTA\n\n\n      if (this.state.customName === 'href') {\n        deepChange.data.links.content.map(function (element, index) {\n          return element[_this3.state.customName] = _this3.state.markup;\n        });\n      }\n\n      if (this.state.customName === 'text') {\n        //console.log(this.state.customName);\n        deepChange.data.links.content.map(function (element, index) {\n          return element[_this3.state.customName] = _this3.state.markup;\n        });\n      }\n\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n      this.parseJson();\n    }\n  }, {\n    key: \"globalOnChange\",\n    value: function globalOnChange(e) {\n      console.log(e.target.value);\n    }\n  }, {\n    key: \"focusElem\",\n    value: function focusElem(e) {\n      // this fn helps identify which input elem we are changing\n      this.setState({\n        targetName: e.target.name\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.state.jsonValue.data.background.content);\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"DataGeneral\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"select-dropdown\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226\n        },\n        __self: this\n      }, React.createElement(\"select\", {\n        onChange: this.parseJson,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"Select Template\"), React.createElement(\"option\", {\n        value: this.state.jsonValue.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, this.state.jsonValue.name))), React.createElement(\"div\", {\n        className: \"SelectForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"leftDiv\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onChange: this.elemUpdatedInForm,\n        onKeyUp: this.focusElem,\n        onClick: this.focusElem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, this.state.elem))), React.createElement(PlainJson, {\n        json: this.state.jsonDataRaw,\n        detect: this.state.changedDetected,\n        markup: this.state.markup,\n        jsonValue: this.state.jsonValue,\n        visibility: this.state.visibility,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 249\n        },\n        __self: this\n      }, React.createElement(\"h6\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"Last Change\"), React.createElement(ListItem, {\n        name: this.state.changedDetected,\n        list: this.state.markup,\n        customName: this.state.customName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DataGeneral;\n}(Component);\n\nexport default DataGeneral;","map":{"version":3,"sources":["/Users/ataashu/developer/sew/src/DataGeneral.js"],"names":["React","Component","Fragment","jsonData","ImgPreview","json","JSON","parse","stringify","ListItem","props","customName","name","list","PlainJson","state","changedDetected","markup","jsonValue","jsonStringify","clicked","visibility","DataGeneral","elem","jsonDataRaw","targetName","parseJson","bind","toUpdate","createMarkup","elemUpdatedInForm","focusElem","origJson","jsonNew","ctaLinksArray","data","links","content","linkInputs","map","item","index","text","href","instanceHtml","instanceDesc","replace","background","altText","largeImg","smallImg","svgoverlay","experimentRunning","toString","setState","__html","e","target","nodeName","toLowerCase","value","dataset","instancename","makeChangesJson","deepChange","currentChange","element","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,OAAO,oBAAP;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,QAAf,CAAX,CAAX;;IAEMM,Q;;;;;;;;;;;;;6BACK;AACP,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAO,QAAA,KAAK,EAAE;AAAE,sBAAY,MAAd;AAAsB,mBAAS;AAA/B,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0D,KAAKC,KAAL,CAAWC,UAArE,OAAkF,KAAKD,KAAL,CAAWE,IAA7F,CADD,UAED;AAAO,QAAA,KAAK,EAAE;AAAE,sBAAY,MAAd;AAAsB,mBAAS;AAA/B,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAuD,KAAKF,KAAL,CAAWG,IAAlE,CAFC,CADF;AAMD;;;;EARoBZ,S;;IAUjBa,S;;;;;AACJ,qBAAYJ,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,mFAAMA,KAAN;AACA,UAAKK,KAAL,GAAa;AACXV,MAAAA,IAAI,EAAE,MAAKK,KADA;AAEXM,MAAAA,eAAe,EAAE,MAAKN,KAFX;AAGXO,MAAAA,MAAM,EAAE,MAAKP,KAHF;AAIXQ,MAAAA,SAAS,EAAE,MAAKR,KAJL;AAKXS,MAAAA,aAAa,EAAEb,IAAI,CAACE,SAAL,CAAe,MAAKU,SAApB,EAA+B,IAA/B,EAAqC,CAArC,CALJ;AAMXE,MAAAA,OAAO,EAAE,EANE;AAOXT,MAAAA,UAAU,EAAC,MAAKD;AAPL,KAAb;AAFiB;AAWlB;;;;6BAEQ;AAEP,aACE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,KAAK,EAAE;AAAC,kCAAgB,KAAKA,KAAL,CAAWW,UAA3B;AAAD,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAC,kBAAf;AAAkC,QAAA,SAAS,EAAC,gCAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,QAAQ,EAAC,UAAnB;AAA8B,QAAA,EAAE,EAAC,kBAAjC;AAAoD,QAAA,KAAK,EAAGf,IAAI,CAACE,SAAL,CAAe,KAAKO,KAAL,CAAWG,SAAX,CAAqBb,IAApC,EAA0C,IAA1C,EAAgD,CAAhD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,CADF;AAUD;;;;EA1BqBJ,S;;AA2BvB;;IAEKqB,W;;;;;AACJ,uBAAYZ,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;AACA,WAAKK,KAAL,GAAa;AACXG,MAAAA,SAAS,EAAEf,QADA;AAEXoB,MAAAA,IAAI,EAAE,EAFK;AAGXP,MAAAA,eAAe,EAAE,EAHN;AAIXQ,MAAAA,WAAW,EAAErB,QAJF;AAKXc,MAAAA,MAAM,EAAE,EALG;AAMXN,MAAAA,UAAU,EAAE,EAND;AAOXc,MAAAA,UAAU,EAAE,EAPD;AAQXJ,MAAAA,UAAU,EAAC;AARA,KAAb;AAUA,WAAKK,SAAL,GAAiB,OAAKA,SAAL,CAAeC,IAAf,wDAAjB;AACA,WAAKC,QAAL,GAAgB,OAAKA,QAAL,CAAcD,IAAd,wDAAhB;AACA,WAAKE,YAAL,GAAoB,OAAKA,YAAL,CAAkBF,IAAlB,wDAApB;AACA,WAAKG,iBAAL,GAAyB,OAAKA,iBAAL,CAAuBH,IAAvB,wDAAzB;AACA,WAAKI,SAAL,GAAiB,OAAKA,SAAL,CAAeJ,IAAf,wDAAjB;AAhBiB;AAiBlB,G,CACD;;;;;gCACY;AACV,UAAMK,QAAQ,GAAG3B,IAAjB;AACA,UAAI4B,OAAO,GAAG,KAAKlB,KAAL,CAAWG,SAAzB;AACA,UAAIgB,aAAa,GAAGF,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,OAAxC;AACA,UAAIC,UAAU,GAAGJ,aAAa,CAACK,GAAd,CAAkB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAClD,eACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAM;AAAO,UAAA,GAAG,EAAE,SAAOA,KAAnB;AAA0B,UAAA,OAAO,EAAE,wBAAsBA,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAqE;AAAO,+BAAkB,MAAzB;AAAgC,UAAA,EAAE,EAAE,wBAAsBA,KAA1D;AAAiE,UAAA,IAAI,EAAC,MAAtE;AAA6E,UAAA,WAAW,EAAED,IAAI,CAACE,IAA/F;AAAqG,UAAA,IAAI,EAAC,MAA1G;AAAiH,UAAA,KAAK,EAAEF,IAAI,CAACE,IAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAArE,CAAN,EAAuN;AAAO,UAAA,GAAG,EAAE,UAAQD,KAApB;AAA2B,UAAA,OAAO,EAAE,wBAAsBA,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsE;AAAO,+BAAkB,MAAzB;AAAgC,UAAA,EAAE,EAAE,wBAAsBA,KAA1D;AAAiE,UAAA,IAAI,EAAC,MAAtE;AAA6E,UAAA,WAAW,EAAED,IAAI,CAACG,IAA/F;AAAqG,UAAA,IAAI,EAAC,MAA1G;AAAiH,UAAA,KAAK,EAAEH,IAAI,CAACG,IAA7H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAtE,CAAvN,MADA;AAED,OAHgB,CAAjB;AAMA,UAAIC,YAAY,GACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAO,QAAA,OAAO,EAAEZ,QAAQ,CAACa,YAAT,CAAsBC,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACE;AAAO,6BAAkB,cAAzB;AAAwC,QAAA,EAAE,EAAEd,QAAQ,CAACa,YAAT,CAAsBC,OAAtB,CAA8B,KAA9B,EAAqC,EAArC,CAA5C;AAAsF,QAAA,IAAI,EAAC,MAA3F;AAAkG,QAAA,WAAW,EAAEd,QAAQ,CAACa,YAAxH;AAAsI,QAAA,YAAY,EAAEb,QAAQ,CAACa,YAA7J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCALF,EAME;AAAO,QAAA,OAAO,EAAEb,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCW,OAAjC,CAAyCF,OAAzC,CAAiD,KAAjD,EAAwD,EAAxD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCACA;AAAO,6BAAkB,SAAzB;AAAmC,QAAA,IAAI,EAAC,YAAxC;AAAqD,QAAA,EAAE,EAAEd,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCW,OAAjC,CAAyCF,OAAzC,CAAiD,KAAjD,EAAwD,EAAxD,CAAzD;AAAsH,QAAA,IAAI,EAAC,MAA3H;AAAkI,QAAA,YAAY,EAAEd,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCW,OAAjL;AAA0L,QAAA,WAAW,EAAEhB,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCW,OAAxO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CANF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAUE;AAAO,QAAA,OAAO,EAAEhB,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCY,QAAjC,CAA0CH,OAA1C,CAAkD,KAAlD,EAAyD,EAAzD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACE;AAAO,6BAAkB,UAAzB;AAAoC,QAAA,IAAI,EAAC,YAAzC;AAAsD,QAAA,EAAE,EAAEd,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCY,QAAjC,CAA0CH,OAA1C,CAAkD,KAAlD,EAAyD,EAAzD,CAA1D;AAAwH,QAAA,IAAI,EAAC,MAA7H;AAAoI,QAAA,YAAY,EAAEd,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCY,QAAnL;AAA6L,QAAA,WAAW,EAAEjB,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCY,QAA3O;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAVF,EAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAbF,EAcE;AAAO,QAAA,OAAO,EAAEjB,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCa,QAAjC,CAA0CJ,OAA1C,CAAkD,KAAlD,EAAyD,EAAzD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCACA;AAAO,6BAAkB,UAAzB;AAAoC,QAAA,IAAI,EAAC,YAAzC;AAAsD,QAAA,EAAE,EAAEd,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCa,QAAjC,CAA0CJ,OAA1C,CAAkD,KAAlD,EAAyD,EAAzD,CAA1D;AAAwH,QAAA,IAAI,EAAC,MAA7H;AAAoI,QAAA,YAAY,EAAEd,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCa,QAAnL;AAA6L,QAAA,WAAW,EAAElB,QAAQ,CAACG,IAAT,CAAcY,UAAd,CAAyBV,OAAzB,CAAiCa,QAA3O;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,CAdF,EAiBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAlBF,EAmBE;AAAO,QAAA,OAAO,EAAElB,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBH,OAAzB,CAAiCF,OAAjC,CAAyC,KAAzC,EAAgD,EAAhD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCACG;AAAO,6BAAkB,SAAzB;AAAmC,QAAA,IAAI,EAAC,YAAxC;AAAqD,QAAA,EAAE,EAAEd,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBH,OAAzB,CAAiCF,OAAjC,CAAyC,KAAzC,EAAgD,EAAhD,CAAzD;AAA8G,QAAA,IAAI,EAAC,MAAnH;AAA0H,QAAA,YAAY,EAAEd,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBH,OAAjK;AAA0K,QAAA,WAAW,EAAEhB,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBH,OAAhN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADH,CAnBF,EAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAtBF,EAuBE;AAAO,QAAA,OAAO,EAAEhB,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBF,QAAzB,CAAkCH,OAAlC,CAA0C,KAA1C,EAAiD,EAAjD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCACE;AAAO,6BAAkB,UAAzB;AAAoC,QAAA,IAAI,EAAC,YAAzC;AAAsD,QAAA,EAAE,EAAEd,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBF,QAAzB,CAAkCH,OAAlC,CAA0C,KAA1C,EAAiD,EAAjD,CAA1D;AAAgH,QAAA,IAAI,EAAC,MAArH;AAA4H,QAAA,YAAY,EAAEd,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBF,QAAnK;AAA6K,QAAA,WAAW,EAAEjB,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBF,QAAnN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAvBF,EA0BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA1BF,EA2BE;AAAO,QAAA,OAAO,EAAEjB,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBD,QAAzB,CAAkCJ,OAAlC,CAA0C,KAA1C,EAAiD,EAAjD,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCACE;AAAO,6BAAkB,UAAzB;AAAoC,QAAA,IAAI,EAAC,YAAzC;AAAsD,QAAA,EAAE,EAAEd,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBD,QAAzB,CAAkCJ,OAAlC,CAA0C,KAA1C,EAAiD,EAAjD,CAA1D;AAAgH,QAAA,IAAI,EAAC,MAArH;AAA4H,QAAA,YAAY,EAAEd,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBD,QAAnK;AAA6K,QAAA,WAAW,EAAElB,QAAQ,CAACG,IAAT,CAAcgB,UAAd,CAAyBD,QAAnN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CA3BF,EA8BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA9BF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBA/BF,EAgCGZ,UAhCH,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjCF,EAkCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAlCF,EAmCE;AAAO,QAAA,OAAO,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCACA;AAAQ,6BAAkB,mBAA1B;AAA8C,QAAA,EAAE,EAAC,qBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAQ,QAAA,YAAY,EAAEL,OAAO,CAACmB,iBAAR,CAA0BC,QAA1B,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGpB,OAAO,CAACmB,iBAAR,CAA0BC,QAA1B,EADH,CADF,EAIE;AAAQ,QAAA,KAAK,EAAGpB,OAAO,CAACmB,iBAAR,CAA0BC,QAA1B,OAAyC,IAA1C,GAAkD,KAAlD,GAAyD,IAAxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC,CAAC,KAAKtC,KAAL,CAAWG,SAAX,CAAqBkC,iBAArB,CAAuCC,QAAvC,EADF,CAJF,CADA,CAnCF,CADF;AAiDA,WAAKC,QAAL,CAAc;AACZjC,QAAAA,UAAU,EAAE;AADA,OAAd;AAGA,WAAKO,QAAL,CAAcgB,YAAd;AACD,K,CACD;;;;6BACSA,Y,EAAc;AACrB,WAAKU,QAAL,CAAc;AACZ/B,QAAAA,IAAI,EAAEqB;AADM,OAAd;AAGA,WAAKf,YAAL;AACD,K,CAED;;;;mCACe;AACb,aAAO;AACL0B,QAAAA,MAAM,EAAE,KAAKxC,KAAL,CAAWQ;AADd,OAAP;AAGD,K,CAED;;;;sCACkBiC,C,EAAG;AACrB;AACE,WAAKF,QAAL,CAAc;AACZtC,QAAAA,eAAe,YAAKwC,CAAC,CAACC,MAAF,CAASC,QAAT,CAAkBC,WAAlB,EAAL,CADH;AAEZ1C,QAAAA,MAAM,EAAEuC,CAAC,CAACC,MAAF,CAASG,KAFL;AAGZjD,QAAAA,UAAU,EAAE6C,CAAC,CAACC,MAAF,CAASI,OAAT,CAAiBC;AAHjB,OAAd,EAFmB,CAQnB;;AACA,WAAKC,eAAL;AACD;;;sCACiB;AAAA;;AAChB,UAAIC,UAAU,GAAG,KAAKjD,KAAL,CAAWG,SAA5B,CADgB,CAId;;AACA,UAAI+C,aAAa,GAAG,KAAKlD,KAAL,CAAWG,SAAX,CAAqB,KAAKH,KAAL,CAAWJ,UAAhC,CAApB,CALc,CAOd;;AACA,UAAI,KAAKI,KAAL,CAAWJ,UAAX,KAA0B,mBAA9B,EAAmD;AACjDsD,QAAAA,aAAa,GAAGA,aAAa,GAAI,KAAKlD,KAAL,CAAWG,SAAX,CAAqB,KAAKH,KAAL,CAAWJ,UAAhC,IAA8C,KAAlD,GAA4D,KAAKI,KAAL,CAAWG,SAAX,CAAqB,KAAKH,KAAL,CAAWJ,UAAhC,IAA8C,IAAvI,CADiD,CAEjD;AACD;;AACD,UAAI,KAAKI,KAAL,CAAWJ,UAAX,KAA0B,cAA9B,EAA8C;AAC5C,aAAKI,KAAL,CAAWG,SAAX,CAAqB,KAAKH,KAAL,CAAWJ,UAAhC,IAA8C,KAAKI,KAAL,CAAWE,MAAzD,CAD4C,CAE5C;AACD,OAfa,CAgBd;;;AAEA,UAAI,KAAKF,KAAL,CAAWU,UAAX,KAA0B,YAA9B,EAA4C;AAC1C,YAAI,KAAKV,KAAL,CAAWG,SAAX,CAAqBiB,IAArB,CAA0BY,UAA1B,CAAqCV,OAArC,CAA6C,KAAKtB,KAAL,CAAWJ,UAAxD,CAAJ,EAAyE;AACvE,eAAKI,KAAL,CAAWG,SAAX,CAAqBiB,IAArB,CAA0BY,UAA1B,CAAqCV,OAArC,CAA6C,KAAKtB,KAAL,CAAWJ,UAAxD,IAAsE,KAAKI,KAAL,CAAWE,MAAjF;AACD;AACF,OAtBa,CAuBd;;;AACA,UAAI,KAAKF,KAAL,CAAWU,UAAX,KAA0B,YAA9B,EAA4C;AAE1C,YAAIuC,UAAU,CAAC7B,IAAX,CAAgBgB,UAAhB,CAA2B,KAAKpC,KAAL,CAAWJ,UAAtC,CAAJ,EAAuD;AACrD,eAAKI,KAAL,CAAWG,SAAX,CAAqBiB,IAArB,CAA0BgB,UAA1B,CAAqC,KAAKpC,KAAL,CAAWJ,UAAhD,IAA8D,KAAKI,KAAL,CAAWE,MAAzE;AACD;AAEF,OA9Ba,CA+Bd;;;AACA,UAAI,KAAKF,KAAL,CAAWJ,UAAX,KAA0B,MAA9B,EAAsC;AACpCqD,QAAAA,UAAU,CAAC7B,IAAX,CAAgBC,KAAhB,CAAsBC,OAAtB,CAA8BE,GAA9B,CAAkC,UAAC2B,OAAD,EAAUzB,KAAV,EAAoB;AACpD,iBAAOyB,OAAO,CAAC,MAAI,CAACnD,KAAL,CAAWJ,UAAZ,CAAP,GAAgC,MAAI,CAACI,KAAL,CAAWE,MAAlD;AACD,SAFD;AAGD;;AACD,UAAI,KAAKF,KAAL,CAAWJ,UAAX,KAA0B,MAA9B,EAAsC;AACpC;AACAqD,QAAAA,UAAU,CAAC7B,IAAX,CAAgBC,KAAhB,CAAsBC,OAAtB,CAA8BE,GAA9B,CAAkC,UAAC2B,OAAD,EAAUzB,KAAV,EAAoB;AACrD,iBAAOyB,OAAO,CAAC,MAAI,CAACnD,KAAL,CAAWJ,UAAZ,CAAP,GAAgC,MAAI,CAACI,KAAL,CAAWE,MAAlD;AACA,SAFD;AAID;;AAED,WAAKqC,QAAL,CAAc;AACZpC,QAAAA,SAAS,EAAE,KAAKH,KAAL,CAAWG;AADV,OAAd;AAIA,WAAKQ,SAAL;AAEH;;;mCAEc8B,C,EAAE;AACfW,MAAAA,OAAO,CAACC,GAAR,CAAYZ,CAAC,CAACC,MAAF,CAASG,KAArB;AACD;;;8BACSJ,C,EAAG;AACX;AAEA,WAAKF,QAAL,CAAc;AACZ7B,QAAAA,UAAU,EAAE+B,CAAC,CAACC,MAAF,CAAS7C;AADT,OAAd;AAGD;;;6BACQ;AACXuD,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKrD,KAAL,CAAWG,SAAX,CAAqBiB,IAArB,CAA0BY,UAA1B,CAAqCV,OAAjD;AACI,aACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAM,QAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEI;AAAQ,QAAA,QAAQ,EAAE,KAAKX,SAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAnC,EACE;AAAQ,QAAA,KAAK,EAAE,KAAKX,KAAL,CAAWG,SAAX,CAAqBN,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA2C,KAAKG,KAAL,CAAWG,SAAX,CAAqBN,IAAhE,CADF,CAFJ,CAFF,EAQE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AACC,QAAA,QAAQ,EAAE,KAAKkB,iBADhB;AAEC,QAAA,OAAO,EAAE,KAAKC,SAFf;AAGC,QAAA,OAAO,EAAE,KAAKA,SAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAIG,KAAKhB,KAAL,CAAWQ,IAJd,CADA,CADF,CADF,EAcE,oBAAC,SAAD;AAAW,QAAA,IAAI,EAAE,KAAKR,KAAL,CAAWS,WAA5B;AAAyC,QAAA,MAAM,EAAE,KAAKT,KAAL,CAAWC,eAA5D;AAA6E,QAAA,MAAM,EAAE,KAAKD,KAAL,CAAWE,MAAhG;AAAwG,QAAA,SAAS,EAAE,KAAKF,KAAL,CAAWG,SAA9H;AAAyI,QAAA,UAAU,EAAE,KAAKH,KAAL,CAAWM,UAAhK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAdF,CARF,CADF,EA0BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFA,EAGA,oBAAC,QAAD;AAAU,QAAA,IAAI,EAAE,KAAKN,KAAL,CAAWC,eAA3B;AAA4C,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE,MAA7D;AAAqE,QAAA,UAAU,EAAE,KAAKF,KAAL,CAAWJ,UAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHA,CA1BJ,CADF;AAmCD;;;;EAnNuBV,S;;AAsN1B,eAAeqB,WAAf","sourcesContent":["import React, {Component, Fragment} from 'react';\nimport jsonData from './marketing_json/svgOverlay.json';\nimport './DataGeneral.scss';\nimport ImgPreview from './ImgPreview'\nlet json = JSON.parse(JSON.stringify(jsonData));\n\nclass ListItem extends Component {\n  render() {\n    return ( \n      <Fragment>\n\t      <small style={{ \"fontSize\": \"12px\", \"color\": \"orange\" }}>{this.props.customName} {this.props.name}</small>&nbsp;\n\t\t\t  <small style={{ \"fontSize\": \"12px\", \"color\": \"red\" }}>{this.props.list}</small>\n\t\t\t</Fragment>\n    );\n  }\n}\nclass PlainJson extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      json: this.props,\n      changedDetected: this.props,\n      markup: this.props,\n      jsonValue: this.props,\n      jsonStringify: JSON.stringify(this.jsonValue, null, 2),\n      clicked: '',\n      customName:this.props\n    };\n  }\n\n  render() {\n\n    return (\n      <div className=\"rightDiv\" style={{\"visibility\":`${this.props.visibility}`}}>\n        <Fragment>\n          <label htmlFor=\"textarea-a--json\" className=\"sds_field sds-js_input-control\">\n            <textarea disabled=\"disabled\" id=\"textarea-a--json\" value={ JSON.stringify(this.state.jsonValue.json, null, 2) }>\n            </textarea>\n          </label>\n        </Fragment>\n      </div>\n    );\n  }\n};\n\nclass DataGeneral extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsonValue: jsonData,\n      elem: '',\n      changedDetected: '',\n      jsonDataRaw: jsonData,\n      markup: '',\n      customName: '',\n      targetName: '',\n      visibility:'hidden'\n    }\n    this.parseJson = this.parseJson.bind(this);\n    this.toUpdate = this.toUpdate.bind(this);\n    this.createMarkup = this.createMarkup.bind(this);\n    this.elemUpdatedInForm = this.elemUpdatedInForm.bind(this);\n    this.focusElem = this.focusElem.bind(this);\n  }\n  // Create HTML template from json\n  parseJson() {\n    const origJson = json;\n    let jsonNew = this.state.jsonValue;\n    let ctaLinksArray = origJson.data.links.content;\n    let linkInputs = ctaLinksArray.map((item, index) => {\n      return (\n      <div>`<label key={\"key_\"+index} htmlFor={\"text-input-ctaText_\"+index}>Text:<input data-instancename=\"text\" id={\"text-input-ctaText_\"+index} name=\"text\" placeholder={item.text} type=\"text\" value={item.text}/></label><label key={\"key__\"+index} htmlFor={\"text-input-ctaLink_\"+index}>Link:<input data-instancename=\"href\" id={\"text-input-ctaLink_\"+index} name=\"href\" placeholder={item.href} type=\"text\" value={item.href} /></label>`</div>);\n    });\n\n\n    let instanceHtml = \n      <div>\n        <label htmlFor={origJson.instanceDesc.replace(/\\s/g, '')}>Instance Description:\n          <input data-instancename='instanceDesc' id={origJson.instanceDesc.replace(/\\s/g, '')} type=\"text\" placeholder={origJson.instanceDesc} defaultValue={origJson.instanceDesc}/>\n        </label>\n        <br/>\n        <h5>Background Properties</h5>\n        <label htmlFor={origJson.data.background.content.altText.replace(/\\s/g, '')}>Background Alt Text:\n        <input data-instancename='altText' name=\"background\" id={origJson.data.background.content.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.altText} placeholder={origJson.data.background.content.altText} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.background.content.largeImg.replace(/\\s/g, '')}>Background Desktop Image:\n          <input data-instancename='largeImg' name=\"background\" id={origJson.data.background.content.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.largeImg} placeholder={origJson.data.background.content.largeImg} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.background.content.smallImg.replace(/\\s/g, '')}>Background Mobile Image:\n        <input data-instancename='smallImg' name=\"background\" id={origJson.data.background.content.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.background.content.smallImg} placeholder={origJson.data.background.content.smallImg} />\n        </label>\n        <br/>\n        <h5>SVG Overlay Properties</h5>\n        <label htmlFor={origJson.data.svgoverlay.altText.replace(/\\s/g, '')}>Svg Overlay Alt Text:\n           <input data-instancename='altText' name=\"svgoverlay\" id={origJson.data.svgoverlay.altText.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.altText} placeholder={origJson.data.svgoverlay.altText} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')}>Svg Overlay Desktop Image:\n          <input data-instancename='largeImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.largeImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.largeImg} placeholder={origJson.data.svgoverlay.largeImg} />\n        </label>\n        <br/>\n        <label htmlFor={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')}>Svg Overlay Mobile Image:\n          <input data-instancename='smallImg' name=\"svgoverlay\" id={origJson.data.svgoverlay.smallImg.replace(/\\s/g, '')} type=\"text\" defaultValue={origJson.data.svgoverlay.smallImg} placeholder={origJson.data.svgoverlay.smallImg} />\n        </label>\n        <br/>\n        <h5>CTA links</h5>\n        {linkInputs}\n        <br/>\n        <h5>Advanced Option</h5>\n        <label htmlFor=\"__experimentRunning\">Experiment Running:\n        <select data-instancename='experimentRunning' id=\"__experimentRunning\">\n          <option defaultValue={jsonNew.experimentRunning.toString()}> \n            {jsonNew.experimentRunning.toString()}\n          </option>\n          <option value={(jsonNew.experimentRunning.toString() === true) ? false: true}>\n          {!this.state.jsonValue.experimentRunning.toString()}\n          \n          </option>\n        </select>\n      </label></div>;\n\n\n    this.setState({\n      visibility: 'visible'\n    })\n    this.toUpdate(instanceHtml);\n  }\n  // Update the new HTML state\n  toUpdate(instanceHtml) {\n    this.setState({\n      elem: instanceHtml\n    });\n    this.createMarkup();\n  }\n\n  // Convert string to HTML and set in DOM\n  createMarkup() {\n    return {\n      __html: this.state.elem\n    };\n  }\n\n  // Detect change on the form\n  elemUpdatedInForm(e) {\n  //  console.dir(e.target);\n    this.setState({\n      changedDetected: `${e.target.nodeName.toLowerCase()}`,\n      markup: e.target.value,\n      customName: e.target.dataset.instancename\n    });\n\n    // write changes to json\n    this.makeChangesJson();\n  }\n  makeChangesJson() {\n    let deepChange = this.state.jsonValue;\n\n\n      // changing json new value\n      let currentChange = this.state.jsonValue[this.state.customName];\n \n      //console.log(this.state.customName);\n      if (this.state.customName === 'experimentRunning') {\n        currentChange = currentChange ? (this.state.jsonValue[this.state.customName] = false) : (this.state.jsonValue[this.state.customName] = true);\n        // console.log(`2: ${currentChange}`);\n      }\n      if (this.state.customName === 'instanceDesc') {\n        this.state.jsonValue[this.state.customName] = this.state.markup;\n        //console.log(`3: ${currentChange}`);\n      }\n      // Background Image, Alt\n     \n      if (this.state.targetName === 'background') {\n        if (this.state.jsonValue.data.background.content[this.state.customName]) {\n          this.state.jsonValue.data.background.content[this.state.customName] = this.state.markup;\n        }\n      }\n      // svgoverlay Image, SVG, Alt\n      if (this.state.targetName === 'svgoverlay') {\n        \n        if (deepChange.data.svgoverlay[this.state.customName]) {\n          this.state.jsonValue.data.svgoverlay[this.state.customName] = this.state.markup;\n        }\n\n      }\n      // links - CTA\n      if (this.state.customName === 'href') {\n        deepChange.data.links.content.map((element, index) => {\n          return element[this.state.customName]= this.state.markup;\n        });\n      }\n      if (this.state.customName === 'text') {\n        //console.log(this.state.customName);\n        deepChange.data.links.content.map((element, index) => {\n         return element[this.state.customName]= this.state.markup;\n        });\n\n      }\n\n      this.setState({\n        jsonValue: this.state.jsonValue\n      });\n \n      this.parseJson();\n\n  }\n\n  globalOnChange(e){\n    console.log(e.target.value);\n  }\n  focusElem(e) {\n    // this fn helps identify which input elem we are changing\n   \n    this.setState({\n      targetName: e.target.name\n    })\n  }\n  render() {\nconsole.log(this.state.jsonValue.data.background.content);\n    return(\n      <Fragment>\n        <div className=\"DataGeneral\">\n         \n          <span className=\"select-dropdown\">\n            \n              <select onChange={this.parseJson} ><option>Select Template</option>\n                <option value={this.state.jsonValue.name}>{this.state.jsonValue.name}</option>\n              </select>\n          </span>\n          <div className=\"SelectForm\">\n            <Fragment>\n              <div className=\"leftDiv\">\n              <form \n               onChange={this.elemUpdatedInForm} \n               onKeyUp={this.focusElem}\n               onClick={this.focusElem}>\n                {this.state.elem}\n               </form>\n                {/* <form  onInput={this.elemUpdatedInForm} onKeyDown={this.focusElem}>\n                  <div dangerouslySetInnerHTML={this.createMarkup()}/>\n                </form> */}\n              </div>\n            </Fragment>\n            <PlainJson json={this.state.jsonDataRaw} detect={this.state.changedDetected} markup={this.state.markup} jsonValue={this.state.jsonValue} visibility={this.state.visibility}/>\n            </div>\n          </div>\n          <div>\n        \n          <h6>Last Change</h6> \n          <ListItem name={this.state.changedDetected} list={this.state.markup} customName={this.state.customName} />\n        </div>\n      </Fragment>\n    );\n\n  }\n}\n\nexport default DataGeneral;"]},"metadata":{},"sourceType":"module"}